#!/usr/bin/env bash

# File: my-get-mail
# Author: David Nebauer (david at nebauer dot org)
# Purpose: check for and download email
# Created: 2022-09-14

# ERROR HANDLING    {{{1

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace

# VARIABLES    {{{1

self="$(basename "$0")"
parameters=" [-v] [-d]"
# tools on the system path
required_system_tools=(
	awk grep pgrep
	cat notify-send ping
	getopt offlineimap wc
)
# local tools specified by absolute path
msmtpq="$HOME/.local/bin/msmtpq"
required_local_tools=("$msmtpq")
mail_icon='/usr/share/doc/neomutt/logo/neomutt.svg'
offlineimaprc="$HOME/.offlineimaprc"
full_sync_interval=$((2 * 60 * 60)) # 2 hours, in seconds
cache_dir="$HOME/.cache/offlineimap"
cache_fp="$cache_dir/last-full-sync"
log_file="$HOME/.local/mail/log/offlineimap.log"
ps_grep='bash /home/david/.local/mail/utils/my-get-mail-daemon'
piddir="${XDG_RUNTIME_DIR:-~/.local/var/run}/$self"
pidfile="${piddir}/$self.pid"
now="$(date '+%T, %-A %d %B %Y')"

# flags

declare -A flag_values=(
	[use_icon]=1
	[has_display]=1
	[synced_ok]=0
)
use_icon() {
	flag 'use_icon' "$@"
	return $?
}
has_display() {
	flag 'has_display' "$@"
	return $?
}
synced_ok() {
	flag 'synced_ok' "$@"
	return $?
}
# }}}1

# PROCEDURES

# abortScript($msg)    {{{1
#   abort script with notification error message
#   params: $msg - abort message
#   prints: nil
#   return: nil
abortScript() {
	local body subject
	subject='Offlineimap mail fetch FAILED'
	body="${1:-}"
	if has_display; then
		if use_icon; then
			notify-send --icon="$mail_icon" \
				"$subject" \
				"$body"
		else
			notify-send "$subject" \
				"$body"
		fi
	fi
	echo "$self: offlineimap mail fetch failed: $body"
	exit 1
}
# checkPrereqs()    {{{1
#   intent: check for required tools
#   params: nil
#   prints: error message if tool(s) missing
#   return: n/a, aborts scipts on failure
checkPrereqs() {
	# need bash version containing builtin 'mapfile'
	if ! echo 'test' | mapfile -t 2>/dev/null; then
		local msg
		msg='Bash does not have the builtin feature: mapfile'
		echo "$msg" 1>&2
		logger --priority "user.err" --tag "CHECK-MAIL" "$msg"
		exit 1
	fi
	# check for tools
	local missing tool
	missing=()
	# these tools can be found on the base system path
	for tool in "${required_system_tools[@]}"; do
		command -v "$tool" &>/dev/null || missing+=("$tool")
	done
	# these tools are specified by absolute path
	for tool in "${required_local_tools[@]}"; do
		[[ -x "$tool" ]] || missing+=("$tool")
	done
	if [[ ${#missing[@]} -ne 0 ]]; then
		local msg
		msg="Can't run without: $(joinBy ', ' "${missing[@]}")"
		echo "$msg" 1>&2
		logger --priority "user.err" --tag "CHECK-MAIL" "$msg"
		exit 1
	fi
	unset missing tools required_tools
}
# displayUsage()    {{{1
#   intent: display script usage information
#   params: nil
#   prints: nil
#   return: nil
displayUsage() {
	cat <<_USAGE
${self}: check for and download emails

Runs offlineimap to fetch emails. A quick synchronisation is
performed if a full synchronisation has been performed in
the previous 2 hours, otherwise a full synchronisation is
performed.

Note: the time of the last full synchronisation is stored in
'$cache_fp'.

Offlineimap is run only if all remote mail servers defined
in the offlineimap configuration file are reachable. (Remote
mail servers are defined by 'remotehost' keys.)

Fatal errors result in an abort message being written to the
console and displayed in a system notification.

Known errors are:
  $self is already running (PID=<pid>)
    * another instance of $self has been detected
  Unexpected deletion of pid locking directory: <dirpath>
    * this is usually due to another instance of $self
      interfering with this instance: it deletes the pid
      directory as part of its exit cleanup in between this
      instance creating the directory and writing to it
  Offlineimap is already running
    * an instance of offlineimap is already running
  Cannot locate offlineimap config file: <filepath>
    * unable to locate the specified configuration file
  Unable to reach: <servers>
    * list of mail servers defined in offlineimap
      configuration file that cannot be reached by the
      'ping' command
    * this can indicate a transient condition or total lack
      of internet access
  Unable to create cache directory: <dirpath>
    * the operating system is unable to create the specified
      directory
  See offlineimap log: <filepath>
    * offlineimap exited with an error status

USAGE: ${self} ${parameters}
       ${self} -h

Options: -v = print input lines after command expansion
              (equivalent to 'set -o verbose')
         -d = print input lines as they are read
              (equivalent to 'set -o xtrace')
_USAGE
}
# flag($name, [$value])    {{{1
#   intent: flag getter/setter
#   params: $name  - flag name, also key in 'flag_values' associative array
#           $value - new flag value, boolean {'true','false'} [optional]
#   prints: nil
#   return: setter=nil, getter=boolean flag value
flag() {
	case $# in
	1)
		return "${flag_values[$1]}"
		;;
	2)
		if [[ "$2" = 'true' ]]; then
			flag_values[$1]=0
		fi
		if [[ "$2" = 'false' ]]; then
			flag_values[$1]=1
		fi
		;;
	*)
		echo "$self: bad param count: $#" 1>&2
		exit 2
		;;
	esac
}
# joinBy($delim, $item1[, $item2[, ...]])    {{{1
#   intent: join items with given delimiter
#   params: $delim - delimiter
#           $itemX - items to be joined
#   prints: string containing joined items
#   return: nil
joinBy() {
	local delim first_item
	delim="${1:-}"
	shift
	first_item="${1:-}"
	shift
	printf %s "$first_item" "${@/#/$delim}"
}
# processOptions(@opts)    {{{1
#   intent: process command line options
#   params: @opts - all command line parameters
#   prints: feedback
#   return: nil
processOptions() {
	# read the command line options
	local OPTIONS
	if ! OPTIONS="$(
		getopt \
			--options hvd \
			--long help,verbose,debug \
			--name "${BASH_SOURCE[0]}" \
			-- "${@}"
	)"; then
		# getopt displays errors
		exit 1
	fi
	eval set -- "${OPTIONS}"
	while true; do
		case "${1}" in
		-h | --help)
			displayUsage
			exit 0
			;;
		-v | --verbose)
			set -o verbose
			shift 1
			;;
		-d | --debug)
			set -o xtrace
			shift 1
			;;
		--)
			shift
			break
			;;
		*) break ;;
		esac
	done
}
# }}}1

# MAIN

# basic setup    {{{1
checkPrereqs
processOptions "${@}"
echo -e "\n------------------------------" # demarcate new feedback
echo "$self: $now"                         # timestamp

# set boolean values    {{{1
[[ "x$DISPLAY" != "x" ]] && has_display 'true'
[[ -e "$mail_icon" ]] && use_icon 'true'

# abort if script is already running    {{{1
# • accept risk that another script process has started
#   but not yet written its pid file
##if [[ -d "$piddir" ]]; then
##	sleep 3 # give the other process time to write its pid
##fi
if [[ -f "$pidfile" ]]; then
	# is process actually still running under this pid
	oldpid="$(cat "$pidfile")"
	result="$(pgrep -af "$oldpid" | grep "$ps_grep" || true)"
	[[ -n "$result" ]] &&
		abortScript "$self is already running (PID=$oldpid)"
fi
mkdir -p "$piddir" &>/dev/null || true
[[ -d "$piddir" ]] ||
	abortScript "Unexpected deletion of pid locking directory: $piddir"
pid="$(pgrep -f "$ps_grep" | head -n1)"
echo "$pid" >"$pidfile" # update pid file
trap '[[ -f "${pidfile:-}" ]] && rm -rf "$piddir"' EXIT
unset oldpid pid piddir pidfile result

# abort if offlineimap is already running    {{{1
pgrep -x offlineimap &>/dev/null &&
	abortScript 'Offlineimap is already running'

# give user chance to force quick syncronisation    {{{1
# • default to full sync to avoid delay (requires removing cache file)
rm -f "$cache_fp"
##timeout=1
##prompt="$self: press any key to force quick synchronisation..."
##errexit_setting="$(set -o | grep 'errexit' | awk '{print $2}')"
##set +o errexit
##read -n 1 -p "$prompt" -s -r -t $timeout quick_sync
##[[ $? -le 128 ]] && quick_sync='yes'
##[[ "$errexit_setting" = 'on' ]] && set -o errexit
##echo ' '
##[[ -n "${quick_sync}" ]] || rm -f "$cache_fp"

# flush queued mail    {{{1
num_queue=$("$msmtpq" --q-mgmt -d | grep -c "num" || true)
if [[ $num_queue -gt 0 ]]; then
	msg="$self: flushing $num_queue queued message"
	[[ $num_queue -gt 1 ]] && msg+='s'
	echo "$msg"
	"$msmtpq" --q-mgmt -r
fi
unset msg num_queue

# check that mail servers are reachable    {{{1
[[ -e "$offlineimaprc" ]] ||
	abortScript "Cannot locate offlineimap config file: $offlineimaprc"
mapfile -t mail_servers < <(grep "^remotehost" <"$offlineimaprc" | awk '{print $3}')
missing=()
for server in "${mail_servers[@]}"; do
	echo "$self: checking for mail server $server"
	ping -c1 "$server" &>/dev/null || missing+=("$server")
done
[[ ${#missing[@]} -eq 0 ]] ||
	abortScript "unable to reach $(joinBy ', ' "${missing[@]}")"
unset mail_servers missing

# get time since last full sync    {{{1
[[ -d "$cache_dir" ]] || mkdir -p "$cache_dir"
[[ -d "$cache_dir" ]] ||
	abortScript "Unable to create cache directory: $cache_dir"
if [ -f "$cache_fp" ]; then
	time_of_last_full_sync="$(cat "$cache_fp")"
else
	time_of_last_full_sync=0
fi
time_now=$(date +%s)
time_since_last_full_sync=$((time_now - time_of_last_full_sync))
unset cache_dir time_of_last_full_sync

# fetch new mail with offlineimap    {{{1
if [[ $time_since_last_full_sync -gt $full_sync_interval ]]; then
	echo "$self: full offlineimap sync"
	offlineimap -o -u quiet -l "$log_file" || synced_ok 'false'
	echo -n "$time_now" >"$cache_fp"
else
	echo "$self: quick offlineimap sync"
	offlineimap -o -q -u quiet -l "$log_file" || synced_ok 'false'
fi
synced_ok || abortScript "See offlineimap log: $log_file"
unset cache_fp full_sync_interval log_file time_now time_since_last_full_sync

# update notmuch    {{{1
echo "$self: update notmuch database"
while IFS= read -r line; do
	echo "notmuch-new: $line"
done < <(notmuch new)

# pause to review feedback    {{{1
read -p "$self: press a key to continue... " -n 1 -t 5 -e -r || true
# }}}1

# vim:foldmethod=marker:
