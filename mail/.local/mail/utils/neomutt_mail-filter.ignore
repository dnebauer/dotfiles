#!/usr/bin/env bash

# File: neomutt_message-filter
# Author: David Nebauer (david at nebauer dot org)
# Purpose: find messages matching tag criteria
# Created: 2022-09-24

# ERROR HANDLING    {{{1

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace


# VARIABLES    {{{1

self="$(basename $0)"
parameters='[-v] [-d] [-m mailbox_path] -t tag_criteria'
required_tools=(getopt notmuch sed)
mailbox_path=
tag_criteria=
declare -A flag_values=([first_search_term]=0)

# flag

first_search_term () { flag 'first_search_term' "$@"; return $?; }
# }}}1

# PROCEDURES

# displayUsage()    {{{1
#   params: nil
#   prints: nil
#   return: nil
displayUsage () {
cat << _USAGE
${self}: get ids of messages matching notmuch tag criteria

Finds all messages matching specified notmuch tag criteria
and returns their ids. The tags to filter on are provided
in a comma-separated list with each tag prefixed with a '+'
or '_' to indicate whether to match or exclude the tag,
respectively. Here are some examples:
  +archive,_inbox
  _spam

By default will search the default notmuch database. It is
optionally possible to provide a path to a specific maildir
folder - the value provided must be valid for the notmuch
search term 'folder'.

Results are returned as a newline-separated list.

Important: there is no error-checking of either the tag
criteria or a maildir folder path. Errors in specifying
either may simply result in failing to correctly find, or
exclude, messages.

Warning: tag names and mailbox paths cannot contain spaces.
There is no known workaround for this restriction.

Usage: ${self} ${parameters}
       ${self} -h

Options: -t val = tag_criteria
                  ('{+,-}tag[,{+,-}tag[,...]]')
         -m val = mailbox path
                  (as per notmuch 'folder' search term)
         -v     = print input lines after command expansion
                  (equivalent to 'set -o verbose')
         -d     = print input lines as they are read
                  (equivalent to 'set -o xtrace')
_USAGE
}
# processOptions([@options])    {{{1
#   params: all command line parameters
#   prints: feedback
#   return: nil
#   note:   after execution variable ARGS contains
#           remaining command line args (after options removed)
processOptions () {
    # read the command line options
    local OPTIONS="$(                                                \
        getopt                                                       \
            --options m:t:hvd                                        \
            --long    mailbox_path:,tag_criteria:,help,verbose,debug \
            --name    "${BASH_SOURCE[0]}"                            \
            -- "${@}"                                                \
    )"
    [[ ${?} -eq 0 ]] || {
        echo 'Invalid command line options' 1>&2
        exit 1
    }
    eval set -- "${OPTIONS}"
    while true ; do
        case "${1}" in
        -m | --mailbox_path ) mailbox_path="${2}" ; shift 2 ;;
        -t | --tag_criteria ) tag_criteria="${2}" ; shift 2 ;;
        -h | --help         ) displayUsage        ; exit 0  ;;
        -v | --verbose      ) set -o verbose      ; shift 1 ;;
        -d | --debug        ) set -o xtrace       ; shift 1 ;;
        --                  ) shift ; break ;;
        *                   ) break ;;
        esac
    done
    ARGS=("${@}")  # remaining arguments
}
# joinBy($delim, @items)    {{{1
#   params: delim - delimiter
#           items - items to be joined
#   prints: string containing joined items
#   return: nil
function joinBy () {
    local delimiter first_item
    delimiter="${1:-}"
    shift
    first_item="${1:-}"
    shift
    printf %b%s "$first_item" "${@/#/$delimiter}"
}
# flag($name, [$value])    {{{1
#   intent: flag getter/setter
#   params: $name  - flag name, also key in 'flag_values' associative array
#           $value - new flag value, boolean {'true','false'} [optional]
#   prints: nil
#   return: setter=nil, getter=boolean flag value
flag () {
    case $# in
    1) return ${flag_values[$1]} ;;
    2) [[ "$2" = 'true' ]] && flag_values[$1]=0 || true;
       [[ "$2" = 'false' ]] && flag_values[$1]=1 || true ;;
    *) echo "Bad param count: $#" > /dev/stderr; exit 2 ;;
    esac
}
#    }}}1

# MAIN

# check for required tools    {{{1
missing=()
for tool in "${required_tools[@]}" ; do
    command -v "${tool}" &>/dev/null || missing+=("${tool}")
done
[[ ${#missing[@]} -eq 0 ]] || {
    echo "Can't run without: $(joinBy ', ' "${missing[@]}")" >/dev/stderr
    exit 1
}
unset missing tools required_tools

# process command line options    {{{1
# - results in ${ARGS[@]} holding remaining non-option command line arguments
processOptions "${@}"

# build notmuch command    {{{1
cmd=(notmuch search --output=messages --format=text --exclude=false --)

# add mailbox path if provided    {{{1
if [[ -n "$mailbox_path" ]] ; then
    cmd+=(folder:$mailbox_path)
    first_search_term 'false'
fi

# add tag criteria    {{{1
IFS=',' read -ra tag_items <<< "$tag_criteria"
for tag_item in "${tag_items[@]}" ; do
    prefix="${tag_item:0:1}"
    tag="${tag_item:1}"
    if first_search_term ; then first_search_term 'false'
                           else cmd+=(AND)
    fi
    [[ "$prefix" = '+' ]] && cmd+=(tag:$tag)
    [[ "$prefix" = '_' ]] && cmd+=(NOT tag:$tag)
done

echo "command: ${cmd[@]}" >> ~/neomutt_mail-filter.log

# get message ids    {{{1
output=($("${cmd[@]}"))

# strip prefix    {{{1
ids=($(for item in "${output[@]}" ; do echo "$item" | sed "s/^id://" ; done))

echo "id count: ${#ids[@]}" >> ~/neomutt_mail-filter.log

# output message ids    {{{1
for item in "${ids[@]}" ; do
    echo "$item"
done
# }}}1

# vim:foldmethod=marker:
