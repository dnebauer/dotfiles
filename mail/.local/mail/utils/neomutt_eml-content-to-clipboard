#! /home/david/.venvs/neomutt/bin/python

# * the unusual shebang is because the 'xerox' and
#   'html2text' modules are installed in a virtual
#   environment (~/.venvs/neomutt)
# * if the script is run using the python excecutable
#   from that virtual environment it automatically
#   finds those modules
# * the modules are installed in the virtual
#   environment in a subdirectory specific to the
#   version of python in use at the time the module
#   was installed
# * when the system python is upgraded to a new
#   version, e.g., python3 3.12→3.13, this script
#   will be unable to locate the modules, and will
#   fail with a ModulNotFound error for 'html2text'
# * the solution is to delete and re-create the
#   virtual environment and reinstall into it the
#   'xerox' and 'html2text' modules.

# pyright: reportAny=false
# pyright: reportAttributeAccessIssue=false
# pyright: reportMissingParameterType=false
# pyright: reportUnknownArgumentType=false
# pyright: reportUnknownMemberType=false
# pyright: reportUnknownParameterType=false
# pyright: reportUnknownVariableType=false
# pylint: disable=invalid-name

# module docstring    {{{1
""" script to send email content to clipboard

This script reads an email from stdin, extracts the
content/payload as plain text, and sends it to the system
clipboard.

Copyright: David Nebauer, 2023-01-29
License: GPL-3+
"""

# import    {{{1

import sys
import logging as log
import textwrap
import argparse
import email
import html2text

# xerox module is part of a virtual environment (see shebang)
# • although linter cannot find it, python finds it at runtime
import xerox  # type: ignore[reportMissingImports] # noqa: E402


class ContentToClipboard:  # {{{1
    # class docstring    {{{2
    """send content to clipboard as plain text

    assumes:
    * email is supplied via stdin

    usage:

    sendclip = ContentToClipboard()
    sendclip.process_args()
    sendclip.create_email_object()
    sendclip.extract_content()
    sendclip.send_to_clipboard()
    """

    # the 'reportMissingSuperCall' error displays erroneously on base classes
    def __init__(self) -> None:  # type: ignore[reportMissingSuperCall] {{{2
        """initialise variables"""
        # configure logging
        log.basicConfig(format="%(message)s")

        # email object
        self._email = None

        # email content/payload
        self._content = None

    @staticmethod
    def _abort(msg: str) -> None:  # {{{2
        """display error and exit"""
        log.error(msg)
        sys.exit(msg)

    @staticmethod
    def process_args() -> None:  # {{{2
        """print help if requested"""
        description: str = textwrap.dedent(
            text="""\
        script to send email content to clipboard as plain text

        This script reads an email from stdin, extracts the content
        as plaint text, and sends it to the system clipboard.
        """
        )
        _ = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description=description,
        ).parse_args()

    def create_email_object(self) -> None:  # {{{2
        """create email object from stdin"""
        # save stdin to string
        # - ignore UnicodeDecodeErrors from sys.stdin.readlines
        sys.stdin.reconfigure(encoding="utf-8", errors="ignore")
        if sys.stdin.isatty():
            self._abort(msg="No data has been piped into script")
        lines: list[str] = sys.stdin.readlines()
        data: str = "".join(lines)
        # create email object
        self._email = email.message_from_string(data)

    def extract_content(self) -> None:  # {{{2
        """extract email content as plain text"""
        text = self._pullout(msg=self._email)
        text = text.strip()
        self._content = text

    def _pullout(self, msg) -> str:  # {{{2
        """pull out email content
        * handles multipart and nested multipart messages

        args:
        * msg email.Message()

        return:
        * all text/html content from all parts (as plaintext string)
        """
        text = ""
        # 1. handle part that is an email object
        if isinstance(
            msg, (email.message.EmailMessage, email.message.Message)
        ):  # stub comment to force line wrapping
            # 1.a. handle part that is an email object with multiple parts
            if msg.is_multipart():
                # - iterate over message parts and recurse
                for part in msg.walk():
                    payload = part.get_payload(decode=True)
                    t = self._pullout(payload)
                    text += t
                return text
            # 1.b. handle part that is an email object with 1 part
            #      - ignore attachments
            if msg.get_filename():
                return text
            content_type = msg.get_content_type()
            # - in following commands note that 'get_payload' can
            #   return bytes objects which can confuse 'html2text'
            #   and may also cause problems when contenated with
            #   strings
            if content_type == "text/plain":
                payload = msg.get_payload(decode=True)
                if isinstance(payload, bytes):
                    payload = payload.decode()
                text += payload
            elif content_type == "text/html":
                payload = msg.get_payload(decode=True)
                if isinstance(payload, bytes):
                    payload = payload.decode()
                text += html2text.html2text(payload)
            else:
                text += "Skipping part that is neither plaintext nor html\n"
            return text
        # 2. handle part that is not an email object
        #    - so far can handle 'bytes' and 'None' types
        if isinstance(msg, bytes):
            try:
                # if 'msg.decode()' then 'errors' defaults to 'strict'
                # • script works in terminal but *not* in neomutt (no output)
                # if 'msg.decode(errors="ignore")'
                # • script works in terminal *and* in neomutt
                # • but undecodable bytes are silently dropped from output
                # experimenting with Latin-1 encodingto see if it reduces
                # decoding errors, that is, dropped bytes
                payload = msg.decode(encoding="latin-1", errors="ignore")
                text += payload
            except ValueError as err:
                errmsg = getattr(err, "message", str(err))
                print(f"Unable to decode bytes part: {errmsg}")
            return text
        if msg is None:
            return text
        raise ValueError(f"Script can't handle {str(type(msg))} part")

    def send_to_clipboard(self):  # {{{2
        """send extracted plaintext content to clipboard
        use xerox.copy():
        * homepage is https://github.com/adityarathod/xerox
        * packaged to install with pip (see https://pypi.org/project/xerox/)
        before using xerox.copy() tried:
        * pyperclip.copy(content)
        * - failed silently
        * tkinter.Tk.clipboard_append(content)
        * - if used 'mainloop' it worked but that showed the main window,
        *   which halted execution until the user dismissed it
        * - a workaround was supposedly to use 'update' instead of
        *   'mainloop', but that failed silently
        * pandas.DataFrame([content]).to_clipboard(index=False, header=False)
        * - works successfully, but wraps the content in double quotes
        * - could not find a workaround to prevent this
        """
        xerox.copy(self._content)


# }}}1


def main():
    """script execution starts here"""
    sendclip = ContentToClipboard()
    sendclip.process_args()
    sendclip.create_email_object()
    sendclip.extract_content()
    sendclip.send_to_clipboard()


if __name__ == "__main__":
    main()

# vim:fdm=marker:
