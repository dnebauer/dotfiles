*dn-utils-nvim.txt*   For Neovim version 0.9   Last change: 2024 January 06

==============================================================================
Table of Contents                                            *dn_utils.contents*

Introduction ·················································· |dn_utils.intro|
External requirements ·································· |dn_utils.requirements|
Variables ················································· |dn_utils.variables|
Function List ·············································· |dn_utils.funclist|
Functions ················································· |dn_utils.functions|
Mappings ··················································· |dn_utils.mappings|
Commands ··················································· |dn_utils.commands|

==============================================================================
Introduction                                                    *dn_utils.intro*

A plugin to provide useful generic functions. It is intended to be available
to all files being edited. These functions were developed over time by the
author and later combined into a library. Some |dn_utils.commands| and
|dn_utils.mappings| are provided.

==============================================================================
External requirements                                    *dn_utils.requirements*

The menu selection function |dn_utils.menu_select| uses an embedded
|python3| script whose only external dependency is the tkinter package
(https://docs.python.org/3/library/tkinter.html).

==============================================================================
Variables                                                   *dn_utils.variables*

                                                              *dn_utils.options*
While it is not anticipated that users will need to inspect the plugin
options, they are exposed as a table in the "options" field. The preferred
method to set or alter these options is through the |dn_utils.setup| method.
Change them in any other way at your own risk!

==============================================================================
Function List                                                *dn_utils.funclist*

This is a list of functions grouped by what they are used for. An
alphabetical list of function descriptions is located at
|dn_utils.functions|. Use CTRL-] on the function name to jump to detailed
help on it.

Files and directories
• |dn_utils.dir_contents|     get files and subdirs in directory
• |dn_utils.file_readable|    whether a file is readable
• |dn_utils.get_file_dir|     get directory of file being edited
• |dn_utils.get_rtp_dir|      finds directory under runtimepath
• |dn_utils.get_rtp_file|     finds file(s) in directories under 'rtp'
• |dn_utils.parent_dir|       get parent directory
• |dn_utils.path_exists|      check whether file or directory exists
• |dn_utils.remove_dir|       delete directory and contents recursively

User interaction
• |dn_utils.clear_prompt|     clear command line
• |dn_utils.error|            display error message
• |dn_utils.info|             display message to user
• |dn_utils.warn|             display warning message
• |dn_utils.menu_select|      select item from menu

Programming
• |dn_utils.execute_shell_command|
                            execute shell command
• |dn_utils.runtimepaths|     get list of runtime paths
• |dn_utils.scriptnames|      display scripts in location list
• |dn_utils.setup|            initialise/set up plugin
• |dn_utils.shell_escape|     escape shell command
• |dn_utils.showRuntimepaths| display runtime paths
• |dn_utils.sleep|            pause script execution for defined time

String manipulation
• |dn_utils.dumbify_quotes|   replace smart quotes with straight quotes
• |dn_utils.stringify|        convert variable to string
• |dn_utils.match_count|      finds number of occurrences of string
• |dn_utils.pad_internal|     pad string at internal location
• |dn_utils.change_caps|      changes capitalisation of line/selection
• |dn_utils.split|            split string on separator
• |dn_utils.wrap|             wrap string sensibly

Tables
• |dn_utils.is_table_value|   check whether var is a value in table
• |dn_utils.pairs_by_keys|    iterate through table key-value pairs
• |dn_utils.table_remove_empty_end_items|
                            remove empty lines from end of sequence
• |dn_utils.table_print|      print prettified table
• |dn_utils.table_size|       get item or key-value pair count
• |dn_utils.table_stringify|  prettify table

Numbers
• |dn_utils.valid_pos_int|    check whether input is valid positive int

Miscellaneous
• |dn_utils.test|             utility function used for testing only

==============================================================================
Functions                                                   *dn_utils.functions*

dn_utils.change_caps()                                    *dn_utils.change_caps*
    Changes capitalisation of line or visual selection. The {mode} is "n"
    (|Normal-mode|) "i" (|Insert-mode|) or "v" (|Visual-mode|). The line or
    selection is replaced with the altered line or selection. Newlines in a
    selection are preserved.

    The user chooses the type of capitalisation from a menu:
         upper case: convert to all uppercase characters
         lower case: convert to all lowercase characters
      sentence case: convert the first character to uppercase and all other
                     characters to lowercase
         start case: convert the first letter of each word to uppercase and
                     all other letters to lower case
         title case: capitalises first and last words, and all other words
                     except articles, prepositions and conjunctions of fewer
                     than five letters

    Returns: ~
        (nil)  No return value


dn_utils.clear_prompt()                                  *dn_utils.clear_prompt*
    Clear command line.

    Returns: ~
        (nil)  No return value


dn_utils.dir_contents({dirpath})                         *dn_utils.dir_contents*
    Get files and subdirectories in a specified directory.
    Absolute directory paths are handled correctly, including those starting
    with "~".
    Relative directory paths are handled correctly, including those that
    contain "." and "..".

    Parameters: ~
        {dirpath}  (string)  Directory to analyse

    Returns: ~
        (table)  Dictionary containing directory contents, with keys:
                 • files: (sequence) List of file names
                 • dirs: (sequence) List of subdirectory names


dn_utils.dumbify_quotes()                              *dn_utils.dumbify_quotes*
    Convert "smart" quotes and apostrophes in the current buffer to their
    corresponding "dumb" equivalents.

    The "smart" characters are:
    • “ - left double quotation mark (U+201C)
    • ” - right double quotation mark (U+201D)
    • ‘ - left single quotation mark (U+2018)
    • ’ - right single quotation mark, apostrophe (U+2019)

    The "dumb" equivalents these characters are converted to are:
    • " - quotation mark (U+0022)
    • ' - apostrophe, single quotation mark (U+0027)

    Returns: ~
        (nil)  No return value


dn_utils.error({...})                                           *dn_utils.error*
    Display error messages(s).
    While string values are expected, any non-string values are stringified by
    |dn_utils.stringify|.

    Parameters: ~
        {...}  (string|any)  Error messages to display.

    Returns: ~
        (nil)  No return value


dn_utils.execute_shell_command({...})           *dn_utils.execute_shell_command*
    Execute shell command. Note that the shell command is escaped prior to
    execution.

    Parameters: ~
        {...}  (string)  Elements of shell command to execute,
                         e.g., "ls", "-lA"

    Returns: ~
        (table)  Dictionary containing information about execution, with keys:
                 • command: (string) Command executed by the shell
                 • exit_code: (number) Shell command exit code
                 • stdout: (string) Shell command standard output
                 • stderr: (string) Shell command standard error

    Usage: ~
>lua
        local ret = dn_utils.execute_shell_command("ls", "-lA")
        if ret.exit_status ~= 0 then
          error(ret.stderr)
        end
<


dn_utils.file_readable({filepath})                      *dn_utils.file_readable*
    Determine whether a file is readable.
    Returns false for directory paths.

    Parameters: ~
        {filepath}  (string)  File to check

    Returns: ~
        (boolean)  Whether file is readable


dn_utils.get_file_dir()                                  *dn_utils.get_file_dir*
    Get directory of file being edited.
    Returns empty string if the buffer is not associated with a file.

    Returns: ~
        (string)  Directory path


dn_utils.get_rtp_dir({dirname})                           *dn_utils.get_rtp_dir*
    Finds a subdirectory if it is located anywhere under the directories in
    runtimepath.
    Returns a table sequence with all matching subdirectories.
    The table is empty if no matching subdirectories were found.
    An empty table is returned if the directory name is a zero-length string.

    Parameters: ~
        {dirname}  (string)  Name of subdirectory to search for

    Returns: ~
        (table)  Sequence of matching subdirectory paths (may be empty)


dn_utils.get_rtp_file({filename})                        *dn_utils.get_rtp_file*
    Finds a file if it is located anywhere under the directories in
    runtimepath. Both regular files and symlinks will match.
    Returns a table sequence with all matching filepaths.
    The table is empty if no matching files were found.
    An empty table is returned if the filename is a zero-length string.

    Parameters: ~
        {filename}  (string)  Name of file to search for

    Returns: ~
        (table)  Sequence of matching filepaths (may be empty)


dn_utils.info({...})                                             *dn_utils.info*
    Display messages(s).
    While string values are expected, any non-string values are stringified by
    |dn_utils.stringify|.

    Parameters: ~
        {...}  (string|any)  Messages to display.

    Returns: ~
        (nil)  No return value


dn_utils.is_table_value({tbl}, {str})                  *dn_utils.is_table_value*
    Test whether a table contains a specific string.
    Will recurse through nested tables.
    The string must match the entire table value.

    Parameters: ~
        {tbl}  (table)  Table to search
        {str}  (any)    Value to search for (is converted to string)

    Returns: ~
        (boolean)  Whether the table contains the provided string as a value


                                                          *dn_utils.match_count*
dn_utils.match_count({haystack}, {needle})
    Finds number of occurrences of a substring (needle) in a string
    (haystack).

    Parameters: ~
        {haystack}  (string)  String to be searched
        {needle}    (string)  Substring to search for

    Returns: ~
        (number)  Number of occurrences found


dn_utils.menu_select({menu}, {prompt})                    *dn_utils.menu_select*
    Select an option from a multi-level sequence or table menu.

    An optional [prompt] string can be provided to this function; the default
    value is "Select an option:". Empty strings are ignored. An empty menu
    causes an error.

    The selected menu option (or its associated value) is returned, with a
    |luaref-nil| -indicating no item was selected.

    In the following discussion a "simple" menu is one without any submenus,
    and "simple" variables are string, number, boolean, and nil. A "simple"
    sequence has elements which are all either simple variables or single
    key-value dictionaries whose values are also simple variables. A "simple"
    table has values which are all simple variables.

    If a simple sequence menu is provided, its simple elements are displayed
    in the menu and returned if selected. If a sequence item is a dictionary
    containing one key-value pair, the key is displayed in the menu and, if
    selected, its value is returned. (It is a fatal error if a sequence item
    is a dictionary containing multiple key-value pairs.)

    If a simple dictionary menu is provided, its keys form the menu items and
    when an item is selected its corresponding value is returned. Because the
    order of key-value pairs in a dictionary is undefined, the order of menu
    items arising from a dictionary menu cannot be predicted.

    Submenus can be added to both sequence and dictionary menus. In such a
    case the header for the submenu, or child menu, is indicated in the parent
    menu by appending an arrow ( ->) to the header option in the parent menu.
    Adding a submenu Dict is easy - the new submenu is added as a new
    key-value pair to the parent menu. The new key is the submenu header in
    the parent menu while the new value is a sequence or dictionary defining
    the new submenu options.

    A single menu can contain a mixture of sequence and dictionary elements,
    and multi-level menus can become complex.

    Errors are thrown if a menu item is not a valid data type, if the menu is
    neither a sequence nor a dictionary, and if a menu has no items.

    The inbuilt vim |inputlist()| is used for small and medium sized lists of
    menu options (up to around 20 options). For menus with more options an
    embedded |python3| script is used that has a sole external dependency on
    the tkinter package (https://docs.python.org/3/library/tkinter.html).

    Parameters: ~
        {menu}    (table)   Menu items
        {prompt}  (string)  Prompt (optional, default="Select an option:")

    Returns: ~
        (string)  Selected menu option


                                                         *dn_utils.pad_internal*
dn_utils.pad_internal({str}, {start}, {finish}, {char})
    Insert a character into a string at the given start position until the
    initial location is shifted to the desired finish location. If start and
    finish values are not sensible the string is returned unchanged.

    Parameters: ~
        {str}     (string)      String to be padded
        {start}   (number)      Integer position in string to pad from
        {finish}  (number)      Integer position in string to pad to
        {char}    (string|nil)  Single character to pad with

    Returns: ~
        (string)  Padded string

    Usage: ~
>lua
        local unpadded = 'Column Twenty & Column Twenty One'
        print(dn_utils.pad_internal(unpadded, 15, 20)
        -- "Column Twenty & Column Twenty One"
        -- to
        -- "Column Twenty      & Column Twenty One"
<


dn_utils.pairs_by_keys({tbl}, {sort_fn})                *dn_utils.pairs_by_keys*
    Iterator returning key-value pairs in order of sorted keys. If no sort
    function is provided the default sort method for the lua table.sort
    function is used.

    Parameters: ~
        {tbl}      (table)         Dictionary table to process
        {sort_fn}  (function|nil)  Sort function (default = default sort
                                   method for lua function "table.sort")

    Returns: ~
        (function)  Iterator that presents table key-value pairs in key sort
                    order

    Usage: ~
>lua
        for name, line in pairs_by_keys(lines) do
          print(name, line)
        end
<


dn_utils.parent_dir({path})                                *dn_utils.parent_dir*
    Get parent directory for file or subdirectory.

    Parameters: ~
        {path}  (string)  Path to analyse

    Returns: ~
        (string)  Directory path


dn_utils.parse_filepath({fp})                          *dn_utils.parse_filepath*
    Splits a filepath into its component parts: directory, file name, base
    name, and file extension.
    If a filepath does not have a part then that part is returned as a nil.
    For example, if the file name has no extension then a nil value is
    returned for the extension part.
    Hidden files are handled correctly.

    Parameters: ~
        {fp}  (string)  Filepath to parse

    Returns: ~
        (table)  Dictionary containing parts of filepath, with keys:
                 • dir: (string|nil) Directory part of filepath
                 • file: (string|nil) File name part of filepath
                 • base: (string|nil) Base name part of file name
                 • ext: (string|nil) Extension part of file name


dn_utils.path_exists({path})                              *dn_utils.path_exists*
    Determine whether file or directory path exists.
    Handles:
    • absolute paths (including those starting with "~")
    • relative paths
    • paths containing "." and ".."
    • path containing symlinks.

    Parameters: ~
        {path}  (string)  File or directory path to check

    Returns: ~
        (boolean)  Whether file or directory exists


dn_utils.remove_dir({dirpath}, {opts})                     *dn_utils.remove_dir*
    Deletes the specified directory and all contained files and
    subdirectories.
    The subsidiary files and subdirectories are deleted one by one. Warnings
    are issued for any deletion operations that fail, but this behaviour can
    be changed to issue a fatal error on the first failed delete operation.
    Handles:
    • absolute paths (including those starting with "~")
    • relative paths
    • paths containing "." and ".."
    • path containing symlinks.

    Parameters: ~
        {dirpath}  (string)     Directory to be deleted
        {opts}     (table|nil)  Optional configuration values:
                                • {error} (boolean) Whether to issue fatal
                                  error instead of warning for failed deletion
                                  operations (optional, delete=false)

    Returns: ~
        (boolean)  Whether removal occurred without error


dn_utils.runtimepaths()                                  *dn_utils.runtimepaths*
    Get a list of vim's runtimepath directories.

    Returns: ~
        (table)  List of runtimepath directories


dn_utils.scriptnames()                                    *dn_utils.scriptnames*
    Display the output of `:scriptnames` in a location list for the current
    window.

    Returns: ~
        (nil)  No return value


dn_utils.setup({opts})                                          *dn_utils.setup*
    Called explicitly by users to configure this plugin.

    Parameters: ~
        {opts}  (table)  Plugin options

    Returns: ~
        (nil)  No return value


dn_utils.shell_escape({...})                             *dn_utils.shell_escape*
    Escape shell command elements.

    Parameters: ~
        {...}  (string)  Shell command elements

    Returns: ~
        (string)  Assembled escaped shell command

    Usage: ~
>lua
        local cmd_str = dn_utils.shell_escape("ls", "-lA")
<


dn_utils.show_runtimepaths()                        *dn_utils.show_runtimepaths*
    Display runtime paths, one per line. Attempts to wrap the output sensibly.

    Returns: ~
        (nil)  No return value


dn_utils.sleep({sec})                                           *dn_utils.sleep*
    Pause script for a specified number of seconds.

    Parameters: ~
        {sec}  (number)  Number of seconds to pause script execution

    Returns: ~
        (nil)  No return value


dn_utils.split({inputstr}, {sep})                               *dn_utils.split*
    Split a string on a separator character.

    Parameters: ~
        {inputstr}  (string)      String to split
        {sep}       (string|nil)  Separator which can be any valid
                                  |luaref-patterns|, defaults to lua character
                                  class "%s"

    Returns: ~
        (table)  Array of split items


dn_utils.stringify({var})                                   *dn_utils.stringify*
    Convert variable to string and return the converted string.
    "big-arrow" (" => ") notation is used between keys and values. Consider
    using |lua_tostring()| instead of this function.

    Parameters: ~
        {var}  (any|nil)  Variable to be stringified

    Returns: ~
        (string)  Stringified variable


                                                           *dn_utils.substitute*
dn_utils.substitute({pattern}, {replace}, {opts})
    Performs a configuration-agnostic substitution in the current buffer.
    For the duration of the substitution 'gdefault' is set to off.
    If the default flags are used, then for the duration of the substitution
    'gdefault' is on, case is ignored (the 'ignorecase' and 'smartcase'
    options are ignored), and errors are not shown.
    The cursor does not move.
    The range is the whole file by default.

    Parameters: ~
        {pattern}  (string)     The |pattern| to replace
        {replace}  (string)     The replacement string (can
                                be |sub-replace-special|)
        {opts}     (table|nil)  Optional configuration options:
                                • {flags} (string) Search flags, see |:s_flags|
                                  (default= "egi")
                                • {firstline} (number) First line of
                                  replacement range (default=0)
                                • {lastline} (number) Last line of replacement
                                  range (default=line("$"))
                                • {delim} (string) Search delimiter character,
                                  must be accepted by `:s` (default=/)


                                                          *dn_utils.table_print*
dn_utils.table_print({tbl}, {count}, {pad})
    Print prettified table to console.

    Parameters: ~
        {tbl}    (table)       Table to convert to a string
        {count}  (number|nil)  Number of pads between string tokens
                               (default=1)
        {pad}    (string|nil)  String to use for indenting and padding
                               (default=<Tab>)


                                         *dn_utils.table_remove_empty_end_items*
dn_utils.table_remove_empty_end_items({source})
    Remove empty (no characters or only spaces) items from the end of a table
    sequence.

    Parameters: ~
        {source}  (table)  Table sequence to trim

    Returns: ~
        (table)  Sequence with empty terminal items removed


dn_utils.table_size({tbl})                                 *dn_utils.table_size*
    Determine the number of elements in a table (sequence or dictionary).
    Includes nil values. Compare with |vim.tbl_count()| which excludes nil
    values from its count.

    A fatal error is raised if the parameter is not a table.

    Parameters: ~
        {tbl}  (table)  Table to analyse

    Returns: ~
        (number)  Integer size of table


                                                      *dn_utils.table_stringify*
dn_utils.table_stringify({tbl}, {count}, {pad})
    Convert table to a prettified string.

    Parameters: ~
        {tbl}    (table)       Table to convert to a string
        {count}  (number|nil)  Number of pads between string tokens
                               (default=1)
        {pad}    (string|nil)  String to use for indenting and padding
                               (default=<Tab>)

    Returns: ~
        (string)  Pretty printed table


dn_utils.test()                                                  *dn_utils.test*
    Function used for testing. Its interface is not stable.

    Returns: ~
        (nil)  No return value


dn_utils.trim_char({str}, {char})                           *dn_utils.trim_char*
    Remove leading and trailing characters from a string.
    Note that |vim.trim()| can be used to remove leading and trailing
    whitespace from a string.

    Parameters: ~
        {str}   (string)      String to trim
        {char}  (string|nil)  Character to trim from each end of string
                              (default=<Space>)

    Returns: ~
        (string)  Trimmed string


dn_utils.valid_non_negative_int({var})         *dn_utils.valid_non_negative_int*
    Check whether variable is a non-negative integer. The integer can be zero
    or greater.

    Parameters: ~
        {var}  (any)  Variable to check

    Returns: ~
        (boolean)  Whether variable is a non-negative integer


dn_utils.valid_pos_int({var})                           *dn_utils.valid_pos_int*
    Check whether variable is a positive (non-zero) integer.

    Parameters: ~
        {var}  (any)  Variable to check

    Returns: ~
        (boolean)  Whether variable is a positive integer


dn_utils.warning({...})                                       *dn_utils.warning*
    Display warning messages(s).
    While string values are expected, any non-string values are stringified by
    |dn_utils.stringify|.

    Parameters: ~
        {...}  (string|any)  Warning messages to display.

    Returns: ~
        (nil)  No return value


dn_utils.wrap({message}, {opts})                                 *dn_utils.wrap*
    Wraps a message string sensibly at a specified column. The message must be
    a string and can contain newlines. It can be zero length. Both the wrap
    width and a hanging indent can be specified.

    If no hanging indent is specified, this function first attempts to wrap
    the message string using the system utility "fmt". (This is a utility
    which is found on all *nix systems as a core utility, and there are
    versions available for other operating systems. Although primarily
    intended for formatting C/C++, it does a good job of wrapping plain text.)
    If "fmt" is unavailable or unable to wrap the message string, this
    function performs the wrapping itself.

    Parameters: ~
        {message}  (string)     Message to wrap
        {opts}     (table|nil)  Optional configuration options:
                                • {width} (number) Column to wrap at. Must be
                                  a positive integer. If it is set to zero the
                                  message string is returned without
                                  alteration. If it is less than 10, and not
                                  zero, it is set to 10.
                                • {hang} (number) Size of the hanging indent
                                  in spaces. Must be a positive integer. If it
                                  is set to zero there is no hanging indent.
                                  The wrap width must be greater than than the
                                  hanging indent by at least 10.

    Returns: ~
        (string)  Wrapped message string

    Usage: ~
>lua
        local winwidth = vim.api.nvim_win_get_width(0) - 1
        local wrapped = dn_utils.wrap(message, {width = winwidth})
<


==============================================================================
Mappings                                                     *dn_utils.mappings*

                                                           *dn_utils.<Leader>xa*
This mapping calls the function |dn_utils.test| in mode "n".

                                                           *dn_utils.<Leader>xc*
This mapping calls the function |dn_utils.change_caps| in modes "n", "v" and
"i".

==============================================================================
Commands                                                     *dn_utils.commands*

                                                        *dn_utils.DumbifyQuotes*
Replaces smart quotes with plain ascii "straight" single quotes (apostrophes)
and double quotes. Calls function |dn_utils.dumbify_quotes|.

                                                          *dn_utils.scriptnames*
vim:tw=78:ts=8:noet:ft=help:norl:
