#!/usr/bin/python3

""" Monitor i3 for changes to container fullscreen mode

    When a fullscreen container is detected, the screensaver and
    notifications are disabled, and all polybars are hidden.

    When the last remaining fullscreen container leave
    fullscreen mode, the screensaver and notifications are
    enabled, and all polybars are shown.
"""

from i3ipc import Connection, Event
from subprocess import call
from shutil import which
from time import sleep
import notify2
import syslog
import argparse

def on_fullscreen(i3, event):
    """
    A callback which is called every time a window
    changes its fullscreen mode
    params: i3 = i3 connection object
            event = i3 event object
    """
    try:
        mode = event.container.fullscreen_mode
        if mode == 1:
            # fullscreen container detected
            enter_fullscreen_actions()
        elif mode == 0:
            # no fullscreen container detected
            leave_fullscreen_actions()
        else:
            msg = f'fullscreen_mode value not 0 or 1: {mode}'
            log(msg, True)
            notify(service, msg, True)
            raise ValueError(msg)
    except Exception as err:
        syslog.closelog()
        raise err


def enter_fullscreen_actions(startup: bool = False):
    """
    Actions taken when entering fullscreen
    params: startup = whether this is the initial/startup check
                      [optional, default=False]
    """
    # log event
    if not startup:
        log('detected fullscreen container')
    log('disabling screensaver, notifications and polybar')

    # hide polybar
    call(['polybar-msg', 'cmd', 'hide'])

    # suppress screensaver
    call(['xset', 's', 'off'])
    call(['xset', '-dpms'])

    # notify user
    if not startup:
        notify('Detected fullscreen container',
               'Disabling screensaver, notifications and polybar')
        # notification timeout is 5 seconds
        sleep(6)

    # disable notifications
    call(['dunstctl', 'set-paused', 'true'])

def leave_fullscreen_actions(startup: bool = False):
    """
    Actions taken when last fullscreen container leaves fullscreen
    params: startup = whether this is the initial/startup check
                      [optional, default=False]
    """
    # log event
    if not startup:
        log('no longer any fullscreen containers')
    log('enabling screensaver, notifications and polybar')

    # show polybar
    call(['polybar-msg', 'cmd', 'show'])

    # enable screensaver
    call(['xset', 's', 'on'])
    call(['xset', '+dpms'])

    # enable notifications
    call(['dunstctl', 'set-paused', 'false'])

    # notify user
    if not startup:
        notify('No more fullscreen containers',
               'Re-enabled screensaver, notifications and polybar')

def log(msg: str, crit: bool = False):
    """
    Log system message
    params: msg = popup message
            crit = whether message is critical [optional, default=false]
    """
    level = syslog.LOG_CRIT if crit else syslog.LOG_INFO
    syslog.syslog(level, msg)

def notify(title: str, msg: str, crit: bool = False):
    """
    Display popup notification
    params: title = popup title/summary
            msg = popup message
            crit = whether message is critical [optional, default=false]
    """
    n.set_timeout(5000)
    urgency = notify2.URGENCY_CRITICAL if crit else notify2.URGENCY_NORMAL
    n.set_urgency(urgency)
    n.update(title, msg)
    n.show()


def check_tools():
    """
    Check for required executable programs on path
    Dies if any required tool is missing
    """
    tools = ['polybar-msg', 'xset', 'dunstctl']
    missing = []
    try:
        for tool in tools:
            if not which(tool):
                missing.append(tool)
        if missing:
            msg = 'missing required tool(s): ' + ', '.join(missing)
            log(msg, True)
            notify(service, msg, True)
            raise RuntimeError(msg)
    except Exception as err:
        syslog.closelog()
        raise err

def description():
    """
    Provides help text
    """
    return (
    f"Monitors i3 for containers entering or leaving fullscreen\n"
    f"mode.\n"
    f"\n"
    f"When a mode change is detected, if there is a fullscreen\n"
    f"container present:\n"
    f"* screensaver is disabled\n"
    f"* notifications are disabled\n"
    f"* all polybars are hidden.\n"
    f"\n"
    f"Conversely, if a mode change is detected and there are no\n"
    f"fullscreen containers present:\n"
    f"* screensaver is enabled\n"
    f"* notifications are enabled\n"
    f"* all polybar are shown.\n"
    f"\n"
    f"The notification changes affect both libnotify and dunst\n"
    f"notification servers."
    )

# service provided by this script
service = 'i3 fullscreen handler'

# set up notifications
notify2.init(service)
n = notify2.Notification(None)

# check for required tools (aborts if any missing)
check_tools()

# set up system logging
syslog.openlog(service, logoption=syslog.LOG_PID, facility=syslog.LOG_USER)
log('script started')

# set up help
parser=argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=description()
)
args=parser.parse_args()

# connect to the i3 window manager
i3 = Connection()

# handle initial state of containers
if i3.get_tree().find_fullscreen():
    log('initial state: found fullscreen container')
    enter_fullscreen_actions(True)
else:
    log('initial state: found no fullscreen containers')
    leave_fullscreen_actions(True)

# set event handler for fullscreen events
# - triggers on a container entering or leaving fullscreen mode
i3.on(Event.WINDOW_FULLSCREEN_MODE, on_fullscreen)

# execute main loop
i3.main()
