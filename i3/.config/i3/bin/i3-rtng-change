#!/usr/bin/perl

use Moo;                 # {{{1
use strictures 2;
use 5.006;
use 5.022_001;
use version; our $VERSION = qv('0.1');
use namespace::clean;    # }}}1

# Dn::RTNG::Stations - hash of station urls   {{{1

# station urls are captured in this hash even though they are not currently
# used; this is future-proofing in case a future version of this script makes
# use of station urls
{

    package Dn::RTNG::Stations;

    use Moo;
    use strictures 2;
    use English qw(-no_match_vars);
    use MooX::HandlesVia;
    use Types::Standard;

    # attributes

    # stations
    has 'stations' => (
        is          => 'rw',
        isa         => Types::Standard::HashRef [Types::Standard::Str],
        default     => sub { {} },
        handles_via => 'Hash',
        handles     => {
            add_station   => 'set',     # (name => url)
            station_names => 'keys',    # () --> list
        },
        doc => 'Details of stations (in a group)',
    );

}    # }}}1

{

    package Dn::RTNG;

    use Moo;    # {{{1
    use strictures 2;
    use namespace::clean -except => [ '_options_data', '_options_config' ];
    use Carp qw(croak);
    use Const::Fast;
    use English qw(-no_match_vars);
    use Function::Parameters;
    use IPC::Cmd qw(can_run run);
    use IPC::Run;
    use JSON::MaybeXS;
    use MooX::HandlesVia;
    use MooX::Options protect_argv => 0;
    use Net::DBus;
    use Types::Standard;

    const my $TRUE  => 1;
    const my $FALSE => 0;    # }}}1

    # attributes

    # _group    {{{1
    has '_group' => (
        is      => 'rw',
        isa     => Types::Standard::Str,
        default => q{},
        doc     => 'Station group selected by user',
    );

    # _station    {{{1
    has '_station' => (
        is      => 'rw',
        isa     => Types::Standard::Str,
        default => q{},
        doc     => 'Station selected by user',
    );

    # add_group, group_stations, group_names, no_groups    {{{1
    has '_groups_hashref' => (
        is  => 'rw',
        isa => Types::Standard::HashRef [
            Types::Standard::InstanceOf ['Dn::RTNG::Stations'],
        ],
        default     => sub { {} },
        handles_via => 'Hash',
        handles     => {
            add_group      => 'set',        # (name => stations)
            group_stations => 'get',        # (name)
            group_names    => 'keys',       # () --> list
            no_groups      => 'is_empty',
        },
        doc => 'Groups with stations',
    );    # }}}1

    # methods

    # main()    {{{1
    #
    # does:   main method
    # params: nil
    # prints: feedback
    # return: n/a, dies on failure
    method main () {

        # check for necessary tools
        $self->_check_tools;

        # get station and group details
        $self->_extract_station_data;

        # select group and station
        $self->_select_station;

        # set volume to 25%
        $self->_set_volume;

        # play selected station
        $self->_play_station;

        return;
    }

    # _check_tools()    {{{1
    #
    # does:   checks for required tools on system
    # params: nil
    # prints: error message if tools missing
    # return: n/a, dies on failure
    method _check_tools () {

        # tools: pactl, zenity
        my @tools = qw(pactl zenity);
        for my $tool (@tools) {
            IPC::Cmd::can_run($tool) or die "Cannot run without $tool\n";
        }

        return;
    }

    # _extract_station_data()    {{{1
    #
    # does:   extract station data from RTNG dbus output
    # params: nil
    # prints: error message if fails
    # return: n/a, dies on failure
    method _extract_station_data () {

        # get radiotray-ng bookmarks via dbus interface
        my $bus     = Net::DBus->session;
        my $service = $bus->get_service('com.github.radiotray_ng');
        my $object  = $service->get_object('/com/github/radiotray_ng');
        my $output  = $object->get_bookmarks;

        # decode JSON-like output to a list
        my $data_arrayref = JSON::MaybeXS::decode_json $output;
        my @data          = @{$data_arrayref};
        if ( not @data ) { die "No bookmark data extracted\n"; }

        # extract station data
        my @required_keys = qw(group stations);
        for my $group_data (@data) {

            # check group data has required keys
            for my $key (@required_keys) {
                if (not( exists $group_data->{$key}
                        and defined $group_data->{$key} )
                    )
                {
                    die "Group data is missing required key $key\n";
                }
            }

            my $group = $group_data->{'group'};

            # get station data
            my $stations_arrayref = $group_data->{'stations'};
            my @stations          = @{$stations_arrayref};

            # handle special 'root' group which has no stations
            next if $group eq 'root' and not @stations;

            # get station names and urls
            my $stations = Dn::RTNG::Stations->new;
            for my $station (@stations) {
                my $name = $station->{'name'};
                my $url  = $station->{'url'};
                $stations->add_station( $name => $url );
            }

            # save group details
            $self->add_group( $group => $stations );
        }

        if ( $self->no_groups ) { die "No station data extracted\n"; }

        return;
    }

    # _play_station()    {{{1
    #
    # does:   play the selected group/station
    # params: nil
    # prints: error message if fails
    # return: n/a, dies on failure
    method _play_station () {

        # accept on faith that station and group selected
        my $group   = $self->_group;
        my $station = $self->_station;

        # play station using radiotry-ng dbus interface
        # - note the 'play_station' method does not return success value so
        #   cannot check whether it succeeded
        my $bus     = Net::DBus->session;
        my $service = $bus->get_service('com.github.radiotray_ng');
        my $object  = $service->get_object('/com/github/radiotray_ng');
        $object->play_station( $group, $station );

        return;
    }

    # _run_cmd($cmd)    {{{1
    #
    # does:   runs shell command
    # params: 1 - command [string or arrayref]
    # prints: error message if dies
    # return: output (stdout) of command, dies on failure
    method _run_cmd ($cmd) {

        # run command
        my ( $success, $err, $full, $stdout, $stderr )
            = IPC::Cmd::run( command => $cmd );

        # return command output if successful
        if ($success) {

            # IPC::Cmd::run returns stdout as arrayref, with the underlying
            # array consisting of the shell output chopped into individual
            # string elements 4096 characters long (including newlines), so
            # need to join array elements to reconstruct the command output
            return join q{}, @{$stdout};
        }

        # if here then command failed so return a false value,
        # the default for 'return'
        return;
    }

    # _select($prompt, $items)    {{{1
    #
    # does:   user selects item from a menu
    # params: 1 - menu prompt
    #         2 - menu items [arrayref]
    # prints: nil
    # return: selected item, false value if none selected
    method _select ( $prompt, $items ) {

        my $title = 'Radiotray NG';
        const my $HEIGHT => 500;
        const my $WIDTH  => 300;

        my @cmd = (
            'zenity',          '--list',
            "--title=$title",  "--text=$prompt:",
            '--column=Column', '--hide-header',
            '--mid-search',    "--height=$HEIGHT",
            "--width=$WIDTH",
        );
        push @cmd, @{$items};
        my $pick = $self->_run_cmd( [@cmd] );

        # 'pick' is undefined if user cancelled menu
        if ( not defined $pick ) { return; }

        # if selection successful, the returned value has a terminal newline
        chomp $pick;

        return $pick;
    }

    # _select_station()    {{{1
    #
    # does:   user selects group and station
    # params: nil
    # prints: error message if fails
    # return: n/a, dies on failure
    method _select_station () {

        # first select station group
        # - from previous checks know there is at least one group
        my @groups = sort $self->group_names;
        my $prompt;
        while ($TRUE) {
            $prompt = 'Select a station group';
            my $group = $self->_select( $prompt, [@groups] );
            if ( not $group ) { die "No station selected\n"; }
            $self->_group($group);

            # now select station from groups
            my @stations = sort $self->group_stations($group)->station_names;
            if ( not @stations ) { die "Group $group has no stations\n"; }
            $prompt = 'Select a station';
            my $station = $self->_select( $prompt, [@stations] );
            if ($station) {
                $self->_station($station);
                last;
            }
        }

        return;
    }

    # _set_volume()    {{{1
    #
    # does:   unmute volume and set to 25%
    # params: nil
    # prints: error message if fails
    # return: n/a, dies on failure
    method _set_volume () {
        my $vol = '25%';

        # prevent PerlCritic thinking @DEFAULT_SINK@ is a list
        ## no critic (RequireInterpolationOfMetachars)
        my @unmute  = ( 'pactl', 'set-sink-mute', '@DEFAULT_SINK@', 'false' );
        my @set_vol = ( 'pactl', 'set-sink-volume', '@DEFAULT_SINK@', $vol );
        ## use critic
        $self->_run_cmd( [@unmute] );
        $self->_run_cmd( [@set_vol] );

        return;
    };    # }}}1

}

my $p = Dn::RTNG->new_with_options->main;

1;

# POD    {{{1
__END__

=encoding utf8

=head1 NAME

i3-rtng-change-station - change Radiotray-NG station

=head1 USAGE

B<i3-rtng-change-station>

B<i3-rtng-change-station -h>

=head1 REQUIRED ARGUMENTS

Nil.

=head1 REQUIRED OPTIONS

Nil.

=head1 OPTIONS

=over

=item B<-h>

Display help and exit.

=back

=head1 DESCRIPTION

The user selects a bookmarked radio station defined in Radiotray-NG and plays
it. If Radiotray-NG is currently playing a radio station it will stop it and
start the selected radio station.

=head1 DIAGNOSTICS

No failure modes are currently documented.

=head1 DEPENDENCIES

=head2 Perl modules

Carp, Const::Fast, English, Function::Parameters, IPC::Cmd, IPC::Run,
JSON::MaybeXS, Moo, MooX::HandlesVia, MooX::Options, namespace::clean,
Net::DBus, strictures, Types::Standard.

=head2 Executables

zenity.

=head1 CONFIGURATION

There are no configuration options for this script.

=head1 INCOMPATIBILITIES

There are no known incompatibilities.

=head1 EXIT STATUS

The exit code is 0 for successful execution and 1 if the script does a
controlled exit following an error. If the script crashes unexpectedly the
error code is that given by the system.

=head1 BUGS AND LIMITATIONS

Please report any bugs to the author.

=head1 AUTHOR

David Nebauer (david at nebauer dot org)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2022 David Nebauer (david at nebauer dot org)

This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut
# vim:foldmethod=marker:
