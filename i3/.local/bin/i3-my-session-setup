#!/usr/bin/env bash

# File: i3-my-session-setup
# Author: David Nebauer (david at nebauer dot org)
# Purpose: set up initial i3 session
# Created: 2022-05-25
# Last modified: 2022-02-24

# ERROR HANDLING    {{{1

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace

# VARIABLES    {{{1

self="$(basename "$0")"
# at startup i3 uses path that does not contain ~/.local/bin
# - these tools can be found on base system path
required_system_tools=(
	'alacritty'
	'bc'
	'date'
	'dn-neovide'
	'exec'
	'getopt'
	'i3-msg'
	'logger'
	'mkfifo'
	'mktemp'
	'neomutt'
	'newsboat'
	'printf'
	'sleep'
	'tmux'
	'trap'
	'yad'
)
# - these tools have to be searched for in specified locations
#   . note especially the local qutebrowser wrapper which is
#     vital for proper i3 startup
qutebrowser="$HOME/.local/bin/qutebrowser"
tiddlywiki="$HOME/.local/bin/tiddlywiki"
required_local_tools=("$qutebrowser" "$tiddlywiki")
# trial and error showed that any app post-launch delay < 1 second caused
# problems for qutebrowser windows resetting their titles, independently of the
# delay before the titling itself (even if there is no reasonable explanation
# for that!)
delay_post_launch=1
delay_app_loading=40
# workspace names
workspaces=('1:term' '2:mail' '3:chrome' '4:qute' '5:wiki')
# notification dialog named pipe handling
notify_text_pipe="$(mktemp -u --tmpdir find.XXXXXXXX)"
notify_progress_pipe="$(mktemp -u --tmpdir find.XXXXXXXX)"
trap "notifyCleanup" EXIT
notify_pids=()
# qutebrowser sessions
qutebrowser_sessions=('games' 'mail' 'music' 'porn' 'vim' 'wiki')
# }}}1

# PROCEDURES

# applyLayouts()    {{{1
#   intent: apply layouts to workspaces
#   params: nil
#   prints: nil
#   return: n/a
function applyLayouts() {
	local elapsed layout_file task tmr workspace_name workspace_number
	for workspace in "${workspaces[@]}"; do
		# extract workspace number and name
		workspace_number="${workspace%:*}"
		workspace_name="${workspace#*:}"
		# logging
		tmr="$(timer)"
		task="applying layout to workspace $workspace_number ($workspace_name)"
		log "Begin ${task}"
		notifyMessage "Applying layout $workspace_number ($workspace_name)..."

		# apply layout
		# shellcheck disable=SC2088
		layout_file="~/.config/i3/sessions/workspace_${workspace_number}.json"
		i3-msg "workspace $workspace; append_layout $layout_file"

		# logging
		if test ${?} -ne 0; then log "**FAILED ${task}" 'err'; fi
		log " Finished ${task}"
		elapsed="$(timer "${tmr}")"
		log " Elapsed time ${elapsed}"
	done
}
# assignWorkspaces()    {{{1
#   intent: check for required tools
#   params: nil
#   prints: nil
#   return: n/a
function assignWorkspaces() {
	# Assign workspaces to monitors
	# - this must be done in the i3 config file
	# - there appears to be no way to construct the workspace command in
	#   shell script using i3-msg without i3 interpreting the workspace name
	#   as being everything following the token 'workspace'
	: "this task is done in the i3 config file"
}
# checkPrereqs()    {{{1
#   intent: check for required tools
#   params: nil
#   prints: error message if tool(s) missing
#   return: n/a, aborts scipts on failure
function checkPrereqs() {
	local missing tool
	missing=()
	# these tools can be found on the base system path
	# - at i3 startup the path does not include ~/.local/bin
	for tool in "${required_system_tools[@]}"; do
		command -v "$tool" &>/dev/null || missing+=("$tool")
	done
	# these tools are specified by absolute path
	for tool in "${required_local_tools[@]}"; do
		[[ -x "$tool" ]] || missing+=("$tool")
	done
	if [[ ${#missing[@]} -ne 0 ]]; then
		local msg
		msg="Can't run without: $(joinBy ', ' "${missing[@]}")"
		echo "$msg" >/dev/stderr
		# cannot use 'log' function here:
		# - options have not yet been processed
		# - logging only happens if '--log' option used
		logger --priority "user.err" --tag "i3-SETUP" "$msg"
		exit 1
	fi
}
# displayUsage()    {{{1
#   intent: display usage message in console
#   params: nil
#   prints: nil
#   return: nil
function displayUsage() {
	cat <<_USAGE
$self: setup i3 session on startup

This script is called by the i3 config file during startup
to launch applications. The main purpose for using this
script rather than internal i3 commands is to control the
window role assigned to some apps. This enables them to be
"swallowed" by preset layouts.

It is essential that this script is consistent with any
applied layouts and with the i3 config file. This includes,
but is not limited to, consistency with workspace names.

Other tasks performed by this script include:
* reloading the tiddlywiki client qutebrowser tab
* resetting qutebrowser window titles and download
  directories to default values
* set initial application window focus
* launch status bar.

Usage: $self [-v] [-d] [-l]
       $self -h

Options: -v    = print input lines after command expansion
                 (equivalent to 'set -o verbose')
         -d    = print input lines as they are read
                 (equivalent to 'set -o xtrace')
         -l    = log script actions to system log
_USAGE
}
# joinBy(delim,items[@])    {{{1
#   intent: join items with delimiter to form single string
#   params: 1  - delimiter
#           2+ - items to be joined
#   prints: string containing joined items
#   return: nil
function joinBy() {
	local d=$1
	shift
	local f=$1
	shift
	printf %s "$f" "${@/#/$d}"
}
# launchGoogleChrome()    {{{1
#   intent: launch google chrome
#   params: nil
#   prints: nil
#   return: nil
function launchGoogleChrome() {
	# logging
	local tmr
	tmr="$(timer)"
	local task
	task='launching google chrome'
	log "Begin ${task}"
	notifyMessage 'Launching google chrome...'

	# launch google chrome
	google-chrome &
	sleep $delay_post_launch

	# logging
	if test ${?} -ne 0; then log "**FAILED ${task}" 'err'; fi
	log "  Finished ${task}"
	local elapsed
	elapsed="$(timer "${tmr}")"
	log "  Elapsed time ${elapsed}"
}
# launchNeomutt()    {{{1
#   intent: launch neomutt mail client
#   params: nil
#   prints: nil
#   return: nil
function launchNeomutt() {
	# logging
	local tmr
	tmr="$(timer)"
	local task
	task='launching neomutt mail client'
	log "Begin ${task}"
	notifyMessage 'Launching neomutt mail client...'

	# launch neomutt
	alacritty \
		--class 'AlacrittyNeomutt,AlacrittyNeomutt' \
		--title AlacrittyNeomutt \
		--command neomutt &
	sleep $delay_post_launch

	# logging
	if test ${?} -ne 0; then log "**FAILED ${task}" 'err'; fi
	log "  Finished ${task}"
	local elapsed
	elapsed="$(timer "${tmr}")"
	log "  Elapsed time ${elapsed}"
}
# launchNewsboat()    {{{1
#   intent: launch newsboat news client
#   params: nil
#   prints: nil
#   return: nil
function launchNewsboat() {
	# logging
	local tmr
	tmr="$(timer)"
	local task
	task='launching newsboat news client'
	log "Begin ${task}"
	notifyMessage 'Launching newsboat news client...'

	# launch newsboat
	alacritty \
		--class 'AlacrittyNewsboat,AlacrittyNewsboat' \
		--title AlacrittyNewsboat \
		--command newsboat &
	sleep $delay_post_launch

	# logging
	if test ${?} -ne 0; then log "**FAILED ${task}" 'err'; fi
	log "  Finished ${task}"
	local elapsed
	elapsed="$(timer "${tmr}")"
	log "  Elapsed time ${elapsed}"
}
# launchNvimGui()    {{{1
#   intent: launch nvim gui (currently neovide)
#   params: nil
#   prints: nil
#   return: nil
#   note:   actually launches wrapper script dn-neovim which
#           sets environmental variable NEOVIM_BIN to
#           /usr/local/bin/nvim.appimage to force neovim to
#           use that nvim binary
function launchNvimGui() {
	# logging
	local tmr
	tmr="$(timer)"
	local task
	task='launching nvim gui'
	log "Begin ${task}"
	notifyMessage 'Launching nvim gui...'

	# launch neovide
	dn-neovide &
	sleep $delay_post_launch

	# logging
	if test ${?} -ne 0; then log "**FAILED ${task}" 'err'; fi
	log "  Finished ${task}"
	local elapsed
	elapsed="$(timer "${tmr}")"
	log "  Elapsed time ${elapsed}"
}
# launchQutebrowserSessions()    {{{1
#   intent: launch qutebrowser sessions
#   params: nil
#   prints: nil
#   return: nil
#   note:   the qutebrowser instances are launched with a unique
#           window title string to enable i3's apply_layout mechanism
#           to 'swallow' them into the correct containers -- the window
#           titles are reset to the default value (which displays the
#           active tab title) once they have all loaded
#   note:   the qutebrowser session names are defined in
#           script variable $qutebrowser_sessions
function launchQutebrowserSessions() {
	# loop through session names
	for session in "${qutebrowser_sessions[@]}"; do
		# logging
		local tmr
		tmr="$(timer)"
		local task
		task="launching qutebrowser session '$session'"
		log "Begin ${task}"
		notifyMessage "Launnching qutebrowser session '$session'..."

		# launch qutebrowser instance
		$qutebrowser \
			--set window.title_format "qutebrowser/$session" \
			--restore "$session" &
		sleep $delay_post_launch

		# logging
		if test ${?} -ne 0; then log "**FAILED ${task}" 'err'; fi
		log "  Finished ${task}"
		local elapsed
		elapsed="$(timer "${tmr}")"
		log "  Elapsed time ${elapsed}"
	done
}
# launchTiddlywiki()    {{{1
#   intent: launch tiddlywiki
#   params: nil
#   prints: nil
#   return: nil
function launchTiddlywiki() {
	# logging
	local tmr
	tmr="$(timer)"
	local task
	task='launching tiddlywiki'
	log "Begin ${task}"
	notifyMessage 'Launching tiddlywiki server...'

	# launch tiddlywiki
	plugin_path='/usr/local/share/tiddlywiki/plugins'
	alacritty \
		--title launcher_tiddlywiki \
		--option "env.TIDDLYWIKI_PLUGIN_PATH=\"$plugin_path\"" \
		--command "$tiddlywiki" "$HOME/data/misc/auxiliary-memory" \
		--listen port=10744 &
	sleep $delay_post_launch

	# logging
	if test ${?} -ne 0; then log "**FAILED ${task}" 'err'; fi
	log "  Finished ${task}"
	local elapsed
	elapsed="$(timer "${tmr}")"
	log "  Elapsed time ${elapsed}"
}
# launchTmux()    {{{1
#   intent: launch alacritty terminal running tmux
#   params: nil
#   prints: nil
#   return: nil
function launchTmux() {
	# logging
	local tmr
	tmr="$(timer)"
	local task
	task='launching alacritty terminal running tmux'
	log "Begin ${task}"
	notifyMessage 'Launching tmux...'

	# launch alacritty terminal running tmux
	alacritty \
		--class 'AlacrittyTmux,AlacrittyTmux' \
		--title 'AlacrittyTmux' \
		--command tmux &
	sleep $delay_post_launch

	# logging
	if test ${?} -ne 0; then log "**FAILED ${task}" 'err'; fi
	log "  Finished ${task}"
	local elapsed
	elapsed="$(timer "${tmr}")"
	log "  Elapsed time ${elapsed}"
}
# log(message, [priority])    {{{1
#   intent: write message to system log
#   params: 1 - message [required]
#           2 - priority [optional, default='info']
#               can be emerg|alert|crit|err|warning|notice|info|debug
#   prints: toggled value
#   return: toggled value
function log() {
	# process parameters
	local prefix
	prefix="i3-SETUP"
	local message
	message="${1:-EMPTY}"
	local priority
	priority="${2:-info}"

	# log message
	if logging; then
		logger --priority "user.$priority" --tag "$prefix" "$message"
	fi
}
# logging()    {{{1
#   intent: signal whether logging messages during script execution
#   params: nil
#   prints: nil
#   return: nil
#   note:   function is redefined to return 1 (false)
#           if param '--no-log' is used
function logging() {
	return 0
}
# notifyCleanup()    {{{1
#   intent: cleanup on exit from yad dialog
#   params: nil
#   prints: nil
#   return: n/a
function notifyCleanup() {
	# delete pipe files
	rm -f "$notify_text_pipe" 2>/dev/null || true
	rm -f "$notify_progress_pipe" 2>/dev/null || true
	# cancel redirections
	exec 3>&-
	exec 4>&-
	# kill yad process
	for notify_pid in "${notify_pids[@]}"; do
		kill -9 "$notify_pid" || true
	done
}
# notifyCompletion()    {{{1
#   intent: notify user that i3 setup is complete
#   params: nil
#   prints: nil
#   return: nil
function notifyCompletion() {
	notifyMessage 'Session setup complete'
	sleep 3
}
# notifyDisplay()    {{{1
#   intent: display multi-pane dialog with text and progress bar widgets
#   params: nil
#   prints: nil
#   return: n/a
function notifyDisplay() {
	fkey=$RANDOM
	width=900
	height=90
	font='Monospace 18'

	# construct text-info pane
	mkfifo "$notify_text_pipe"
	exec 3<>"$notify_text_pipe"
	yad \
		--plug="$fkey" \
		--tabnum=1 \
		--text-info \
		--fontname="$font" \
		--wrap \
		--listen \
		<&3 &
	sleep $delay_post_launch
	notify_pids+=($!)

	# construct progress bar pane
	mkfifo "$notify_progress_pipe"
	exec 4<>"$notify_progress_pipe"
	yad \
		--plug="$fkey" \
		--tabnum=2 \
		--progress \
		<&4 &
	sleep $delay_post_launch
	notify_pids+=($!)

	#construct and display dialog
	yad \
		--width=$width \
		--height=$height \
		--on-top \
		--no-escape \
		--no-buttons \
		--sticky \
		--skip-taskbar \
		--title='i3 session setup' \
		--window-icon='start' \
		--paned \
		--key="$fkey" \
		&
	sleep $delay_post_launch
	notify_pids+=($!)
}
# notifyMessage(msg)    {{{1
#   intent: send a message to the yad text-info widget
#   params: msg - text string to display
#   prints: nil
#   return: n/a
function notifyMessage() {
	local msg
	msg=${1:-}
	if [[ -n "$msg" ]]; then
		echo -e '\f' >&3
		echo "$msg" >&3
	fi
}
# processOptions(params[@])    {{{1
#   intent: process command line parameters
#   params: all command line parameters
#   prints: feedback
#   return: nil
#   note:   after execution variable ARGS contains
#           remaining command line args (after options removed)
function processOptions() {
	# read the command line options
	local OPTIONS
	if ! OPTIONS="$(
		getopt \
			--options nhvd \
			--long no-log,help,verbose,debug \
			--name "${BASH_SOURCE[0]}" \
			-- "$@"
	)"; then
		echo 'Invalid command line options' 1>&2
		exit 1
	fi
	eval set -- "$OPTIONS"
	while true; do
		case "$1" in
		-n | --no-log)
			logging() { return 1; }
			shift 1
			;;
		-h | --help)
			displayUsage
			exit 0
			;;
		-v | --verbose)
			set -o verbose
			shift 1
			;;
		-d | --debug)
			set -o xtrace
			shift 1
			;;
		--)
			shift
			break
			;;
		*) break ;;
		esac
	done
}
# reloadWikiQutebrowserTab()    {{{1
#   intent: reload tiddlywiki browser tab on assumption that tiddlywiki
#           server is now running
#   params: nil
#   prints: nil
#   return: n/a
#   note:   the tiddlywiki server usually takes some time to start;
#           because the server and browser client are started at the
#           same time, the tiddlywiki client usually displays a
#           page-not-found error on startup
#   note:   the qutebrowser wrapper script used to launch qutebrowser
#           causes the default base directory to be:
#             /run/user/$(id -u)/qutebrowser/SESSION/
#           which usually resolves to:
#             /run/user/1000/qutebrowser/SESSION/
function reloadWikiQutebrowserTab() {
	# logging
	local tmr
	tmr="$(timer)"
	local task
	task='reload of tiddlywiki client qutebrowser tab'
	log "Begin ${task}"
	notifyMessage 'Reloading tiddlywiki client qutebrowser tab...'

	# reload qutebrowser tab showing tiddlywiki client
	local runtime_dir=${XDG_RUNTIME_DIR:-/run/user/$(id -u)}
	basedir="$runtime_dir/qutebrowser/wiki"
	qutebrowser --basedir "$basedir" ':tab-focus --no-last 1'
	sleep 2
	qutebrowser --basedir "$basedir" ':reload'

	# logging
	log "  Finished ${task}"
	local elapsed
	elapsed="$(timer "${tmr}")"
	log "  Elapsed time ${elapsed}"
}
# resetQutebrowserDownloadDirectory()    {{{1
#   intent: reset default download directory of all qutebrowser instances
#   params: nil
#   prints: nil
#   return: n/a
#   note:   the qutebrowser wrapper script used to launch qutebrowser
#           causes the default download directory to be:
#             /run/user/$(id -u)/qutebrowser/SESSION/download/
#           which usually resolves to:
#             /run/user/1000/qutebrowser/SESSION/download/
#           and this procedure resets it to:
#             ~/Downloads/
function resetQutebrowserDownloadDirectory() {
	# logging
	local tmr
	tmr="$(timer)"
	local task
	task='resetting qutebrowser default download directories'
	log "Begin ${task}"
	notifyMessage 'Resetting qutebrowser default download directories...'

	# reset qutebrowser download directories
	local runtime_dir=${XDG_RUNTIME_DIR:-/run/user/$(id -u)}
	# shellcheck disable=SC2088
	local download_dir='~/Downloads'
	local msg
	for session in "${qutebrowser_sessions[@]}"; do
		msg="Resetting qutebrowser download directory for session '$session'"
		notifyMessage "$msg"
		basedir="$runtime_dir/qutebrowser/$session"
		qutebrowser --basedir "$basedir" ":set downloads.location.directory $download_dir"
	done

	# logging
	log "  Finished ${task}"
	local elapsed
	elapsed="$(timer "${tmr}")"
	log "  Elapsed time ${elapsed}"
}
# resetQutebrowserWindowTitles()    {{{1
#   intent: reset title of all qutebrowser instances to display the
#           active tab title
#   params: nil
#   prints: nil
#   return: n/a
#   note:   the qutebrowser instances were launched with a specified
#           window title string to enable i3's apply_layout mechanism
#           to 'swallow' them into the correct containers -- the window
#           titles are now reset to the default value (which displays
#           the active tab title)
#   note:   the qutebrowser wrapper script used to launch qutebrowser
#           causes the default base directory to be:
#             /run/user/$(id -u)/qutebrowser/SESSION/
#           which usually resolves to:
#             /run/user/1000/qutebrowser/SESSION/
function resetQutebrowserWindowTitles() {
	# logging
	local tmr
	tmr="$(timer)"
	local task
	task='resetting qutebrowser window titles'
	log "Begin ${task}"
	notifyMessage 'Resetting qutebrowser window titles...'

	# reset qutebrowser window titles
	local runtime_dir=${XDG_RUNTIME_DIR:-/run/user/$(id -u)}
	local title='{perc}{current_title}{title_sep}qutebrowser'
	local msg
	for session in "${qutebrowser_sessions[@]}"; do
		msg="Resetting qutebrowser window title for session '$session'"
		notifyMessage "$msg"
		basedir="$runtime_dir/qutebrowser/$session"
		qutebrowser --basedir "$basedir" ":set window.title_format $title"
	done

	# logging
	log "  Finished ${task}"
	local elapsed
	elapsed="$(timer "${tmr}")"
	log "  Elapsed time ${elapsed}"
}
# setInitialContainerFocus()    {{{1
#   intent: set focus on two containers so tab-switch alternates between them
#   params: nil
#   prints: nil
#   return: n/a
function setInitialContainerFocus() {
	# logging
	local tmr
	tmr="$(timer)"
	local task
	task='setting initial container focus'
	log "Begin ${task}"
	notifyMessage 'Setting initial container focus...'

	# focus on neomutt in workspace 2:mail
	i3-msg [class='AlacrittyNeomutt' instance='AlacrittyNeomutt'] focus

	# focus on terminal in workspace 1:term
	i3-msg [class='AlacrittyTmux' instance='AlacrittyTmux'] focus

	# logging
	log "  Finished ${task}"
	local elapsed
	elapsed="$(timer "${tmr}")"
	log "  Elapsed time ${elapsed}"
}
# timer([start])    {{{1
#   intent: get elapsed time
#   params: 1 - start time [optional, provided by this function]
#   prints: if no param - current time (seconds since epoch)
#           if param    - elapsed time string (hh:mm:ss)
#   return: print value
#   usage:  $tmr=$(timer)
#           # ...
#           $elapsed="$(timer $tmr)"    # '12:34:56'
timer() {
	if test ${#} -eq 0; then # no param - return seconds since epoch
		date '+%s'
	else # time param - return elapsed time
		local stime
		stime="${1}"
		local etime
		etime="$(date '+%s')"
		if test -z "${stime}"; then stime="${etime}"; fi
		local dt
		dt="$((etime - stime))"
		local ds
		ds="$((dt % 60))"
		local dm
		dm="$(((dt / 60) % 60))"
		local dh
		dh="$((dt / 3600))"
		printf '%d:%02d:%02d' ${dh} ${dm} ${ds}
	fi
}
# waitForAppsToLoad()    {{{1
#   intent: allow time for apps to load - some tasks cannot be performed
#           until the relevant app has finished loading
#   params: nil
#   prints: nil
#   return: n/a
function waitForAppsToLoad() {
	# logging
	local tmr
	tmr="$(timer)"
	local task
	task="delay for apps to load ($delay_app_loading seconds)"
	log "Begin ${task}"
	notifyMessage 'Waiting for apps to load...'

	# $delay_app_loading is set to 30 seconds
	# - trial and error showed this is sufficient for the computer and
	#   internet speeds in use at the time this script was written
	for ((i = 1; i <= "$delay_app_loading"; i++)); do
		percent=$(echo "$i*100/$delay_app_loading" | bc)
		remaining=$((delay_app_loading - i))
		echo "$percent" >&4
		echo "# Remaining delay: $remaining seconds" >&4
		sleep 1
	done
	echo '# ' >&4

	# logging
	log "  Finished ${task}"
	local elapsed
	elapsed="$(timer "${tmr}")"
	log "  Elapsed time ${elapsed}"
}
# }}}1

# MAIN

checkPrereqs
processOptions "$@"
log 'i3 setup: starting' # can't log till options processed
notifyDisplay
assignWorkspaces # actually done in i3 config file (see function)
applyLayouts
launchNvimGui
launchNeomutt
launchNewsboat
launchGoogleChrome
launchTiddlywiki
launchQutebrowserSessions
launchTmux
waitForAppsToLoad # must precede qutebrowser-modification tasks
resetQutebrowserWindowTitles
resetQutebrowserDownloadDirectory
reloadWikiQutebrowserTab
setInitialContainerFocus
notifyCompletion
log 'i3 setup: finished' # can't log till options processed

# vim:foldmethod=marker:
