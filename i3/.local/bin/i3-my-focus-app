#!/usr/bin/env python3
# pylint: disable=invalid-name

# module docstring    {{{1
''' A simple window switcher

    A window switcher with iterative menus. It first prompts the user to
    select from running window classes, and then prompts the user to
    select from all the application windows of that class.

    Based on example script 'i3-container-commander.py' in github project
    https://github.com/altdesktop/i3ipc-python

    Minor tweaks have been made to:
    * prevent linter messages
    * default to rofi menu
    * hard code grouping by window class
    * hard code action to focus on selected app window
    * gracefully handle cancelling menu.

    The original script credits the faq: https://faq.i3wm.org/question/228/\
    how-do-i-find-an-app-buried-in-some-workspace-by-its-title/
'''

# TODO: if abort app menu drop back to class menu

# import modules    {{{1
from argparse import ArgumentParser
from subprocess import check_output, CalledProcessError
import sys
import i3ipc  # type: ignore

# handle arguments    {{{1
parser = ArgumentParser(prog='i3-my-focus-app',
                        description='''
        i3-my-focus-app is an iterative window switcher. It first prompts the
        user to select from running window classes, and then prompts the user
        to select from all the application windows of that class.
        ''')

args = parser.parse_args()


# functions    {{{1
# funtion select_item(items, prompt)    {{{2
def select_item(items, prompt):
    ''' select and return menu item '''
    menu_input = bytes(str.join('\n', items), 'UTF-8')
    menu_cmd = ['rofi', '-dmenu', '-i', '-l', str(len(items)), '-p', prompt]
    try:
        selected_item = check_output(menu_cmd, input=menu_input)
    except CalledProcessError:
        # occurs when user cancels menu, in which case exit gracefully
        sys.exit()
    return selected_item.decode('UTF-8').strip()


# function select_app_window(selectable_app_windows)    {{{2
def select_app_window(selectable_app_windows):
    ''' select an app from the previously selected window class '''
    def item_format(app_window):
        return f"{app_window.workspace().name}: {app_window.name}"

    # format app windows into menu items
    # - format is "workspace-name: window-name"
    items = [item_format(app_window) for app_window in selectable_app_windows]
    items.sort()

    # select menu item
    selected_item = select_item(items, 'Select app to focus')

    # find and return selected app window/container
    for app_window in selectable_app_windows:
        if item_format(app_window) == selected_item:
            return app_window


# function app_window_class(app_window)    {{{2
def app_window_class(app_window):
    ''' get window class of app window (container) '''
    return str(getattr(app_window, 'window_class'))


# get all application windows    {{{1
# - leaf containers normally contain application windows according to
#   https://i3ipc-python.readthedocs.io/en/latest/con.html#i3ipc.Con.leaves
app_windows = i3ipc.Connection().get_tree().leaves()

# group application windows by window class    {{{1
# - get count of app windows in each window class
window_classes: dict[str, int] = {}
for w in app_windows:
    wc = app_window_class(w)
    if not wc:
        continue
    window_classes[wc] = window_classes[wc] + 1 if wc in window_classes else 1

# select window class    {{{1
if len(window_classes) == 0:
    sys.exit('No window classes located')
elif len(window_classes) == 1:
    chosen_class = next(iter(window_classes))
else:
    chosen_class = select_item(
        [f"{k} ({v})" for k, v in window_classes.items()], 'Select app class')
    chosen_class = chosen_class[:chosen_class.rindex(' ')]

# select application window of chosen class    {{{1
# - pass all 'app_windows' through lambda filter
# - lambda checks whether app window class == chosen_class
class_app_windows = list(filter(
    lambda c: app_window_class(c) == chosen_class, app_windows))
if len(class_app_windows) == 0:
    sys.exit('No app windows match chosen class')
elif len(class_app_windows) == 1:
    chosen_app_window = class_app_windows[0]
else:
    chosen_app_window = select_app_window(class_app_windows)

# focus chosen app window    {{{1
if chosen_app_window:
    chosen_app_window.command('focus')
# }}}1

# vim:foldmethod=marker:
