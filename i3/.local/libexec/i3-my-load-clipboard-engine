#!/usr/bin/perl

use Moo;                 # {{{1
use strictures 2;
use 5.006;
use 5.022_001;
use version; our $VERSION = qv('0.1');
use namespace::clean;    # }}}1

# package Dn::Clipboard::Base    {{{1

# - routines and constants common to multiple packages
{

    package Dn::Clipboard::Base;

    use Moo::Role;    # {{{2
    use strictures 2;
    use namespace::clean;
    use Carp qw(croak);
    use Const::Fast;
    use English qw(-no_match_vars);
    use Function::Parameters;
    use Term::ANSIColor;
    use Term::Cap;
    use Term::ReadKey;
    use Types::Standard;

    const my $TRUE  => 1;
    const my $FALSE => 0;    # }}}2

    # attributes

    # methods

    # abort(@msgs)    {{{2
    #
    # does:   exit script after displaying error message(s)
    # params: @msgs - error messages [array]
    # prints: error messages
    # return: nil, exits scripts
    method abort (@msgs) {

        # print error screen header
        $self->clear_screen;
        my $indent = q{ } x 1;
        say $self->bold("\n${indent}Fatal error\n") or croak;

        # print provided error messages
        my @indented_msgs = map {"$indent$_"} @msgs;
        for my $msg (@indented_msgs) {
            say $msg or croak;
        }

        # print error screen footer
        print "\n${indent}Press any key to exit..." or croak;
        $self->get_char;
        exit;

    }

    # bold()    {{{2
    #
    # does:   make text bold
    # params: $text - string to format
    # prints: nil
    # return: scalar string
    method bold ($text) {
        return Term::ANSIColor::colored( ['bold'], "$text" );
    }

    # boldred()    {{{2
    #
    # does:   make text bold and red
    # params: $text - string to format
    # prints: nil
    # return: scalar string
    method boldred ($text) {
        return Term::ANSIColor::colored( [ 'bold', 'red' ], "$text" );
    }

    # clear_screen()    {{{2
    #
    # does:   clear terminal screen
    # params: nil
    # prints: nil
    # return: n/a, dies on failure
    # source: method taken from perlfaq
    #         (https://perldoc.perl.org/perlfaq8#How-do-I-clear-the-screen?)
    method clear_screen () {

        # get clear control string for current terminal
        my $terminal     = Term::Cap->Tgetent( { OSPEED => 9600 } );
        my $clear_screen = $terminal->Tputs('cl');

        # use clear control string
        print $clear_screen or croak;

        return;
    }

    # get_char()    {{{2
    #
    # does:   get user to input single character
    # params: nil
    # prints: nil, except error messages
    # return: string (char)
    method get_char () {

        # get single character of input
        # - source: https://stackoverflow.com/a/2685736
        ReadMode('cbreak');
        my $key = ReadKey(0);
        ReadMode('normal');

        return $key;
    };    # }}}2

    # yellow()    {{{2
    #
    # does:   make text yellow
    # params: $text - string to format
    # prints: nil
    # return: scalar string
    method yellow ($text) {
        return Term::ANSIColor::colored( ['yellow'], "$text" );
    };                      # }}}2

}

# package Dn::Clipboard::Menu::Item    {{{1

# - encapsulate menu item functionality
{

    ## no critic (ProhibitMultiplePackages)
    package Dn::Clipboard::Menu::Item;
    ## use critic

    use Moo;    # {{{2
    use strictures 2;
    use namespace::clean;
    use Const::Fast;
    use English qw(-no_match_vars);
    use Types::Standard;

    const my $TRUE => 1;    # }}}2

    # attributes

    # kind    {{{2
    has 'kind' => (
        is       => 'ro',
        isa      => Types::Standard::Str,
        required => $TRUE,
        doc      => 'Menu item type {submenu,item}',
    );

    # value    {{{2
    has 'value' => (
        is       => 'ro',
        isa      => Types::Standard::Str,
        required => $TRUE,
        doc      => 'Menu item value (submenu name or item string)',
    );

    # hotkey    {{{2
    has 'hotkey' => (
        is       => 'ro',
        isa      => Types::Standard::Str,
        required => $TRUE,
        doc      => 'Menu item hotkey (single character)',
    );    # }}}2

}

# package Dn::Clipboard::Menu    {{{1

# - encapsulate menu functionality.
# - main method is 'choose'.
# - returns array with 1 or 2 items:
#   * action = {escape,submenu,item}
#   * value = submenu name or item string
{

    ## no critic (ProhibitMultiplePackages)
    package Dn::Clipboard::Menu;
    ## use critic

    use Moo;    # {{{2
    use strictures 2;
    use namespace::clean;
    use Carp qw(croak);
    use Const::Fast;
    use English qw(-no_match_vars);
    use Function::Parameters;
    use MooX::HandlesVia;
    use Types::Standard;

    with qw(Dn::Clipboard::Base);

    const my $TRUE       => 1;
    const my $FALSE      => 0;
    const my $ENTER      => '[Enter]';
    const my $ENTER_NUM  => 10;
    const my $ESCAPE     => '[Esc]';
    const my $ESCAPE_NUM => 27;          # }}}2

    # attributes

    # items, add_item, item_count    {{{2
    has '_items_list' => (
        is  => 'rw',
        isa => Types::Standard::ArrayRef [
            Types::Standard::InstanceOf ['Dn::Clipboard::Menu::Item'],
        ],
        lazy        => $TRUE,
        default     => sub { [] },
        handles_via => 'Array',
        handles     => {
            items      => 'elements',
            add_item   => 'push',
            item_count => 'count',
        },
        doc => 'Array of values',
    );

    # default_key    {{{2
    has 'default_key' => (
        is       => 'rw',
        isa      => Types::Standard::Str,
        required => $FALSE,
        default  => q{},
        doc      => 'Default hotkey selection (if user presses [Enter])',
    );    # }}}2

    # methods

    # choose($name)    {{{2
    #
    # does:   main method in which user makes menu selection
    # params: $name - menu name
    # prints: feedback
    # return: array
    #         0 = action = {item,escape}
    #         1 = value  = item string or null
    method choose ($name) {

        # create hotkey hash
        my $hotkey_index_ref = $self->_hotkey_index;
        my %hotkey_index     = %{$hotkey_index_ref};

        # display menu
        $self->_display_menu($name);

        # user makes selection
        while ($TRUE) {

            # get user key input
            my $key = $self->_user_select;

            # handle special cases
            if ( $key eq $ESCAPE ) {
                say $key or croak;
                return ['escape'];
            }
            if ( $key eq $ENTER ) {
                $key = $self->default_key;
            }

            # return a valid selection
            if ( exists $hotkey_index{$key} ) {
                say $key or croak;
                return $hotkey_index{$key};
            }

            # repeat user selection if selection is invalid

        }

        return;
    }

    # has_hotkey($key)    {{{2
    #
    # does:   check whether any existing menu item has specified hotkey
    # params: $key - hotkey character to check for [char]
    # prints: feedback
    # return: boolean
    method has_hotkey ($key) {

        # check param
        my $ref = ref $key;
        if ($ref) {
            $self->abort(
                'Invalid menu configuration',
                q{},
                "Expected scalar hotkey, got: $ref",
            );
        }
        my $len = length $key;
        if ( $len != 1 ) {
            $self->abort(
                'Invalid menu configuration',
                q{},
                "Expected single char hotkey, got: '$key'",
            );
        }

        # check existing menu items
        my @matches = grep { $_->hotkey eq $key } $self->items;

        return (@matches) ? $TRUE : $FALSE;
    }

    # _display_menu($name)    {{{2
    #
    # does:   print menu in terminal
    # params: $name - menu name
    # prints: nil, except error messages
    # return: n/a, dies on failure
    method _display_menu ($name) {

        my $line;
        my $token = $self->yellow('-->');

        # clear screen
        $self->clear_screen;

        # indent all lines by one space
        my $indent = q{ } x 1;

        # header material
        $line = $self->bold("\n$indent$name menu\n");
        say $line or croak;

        # items
        my @items = $self->items;
        for my $item (@items) {

            # get item data
            my $kind   = $item->kind;
            my $value  = $item->value;
            my $hotkey = $item->hotkey;

            # add submenu signifier
            if ( $kind eq 'submenu' ) {
                $value .= " $token";
            }

            # print item
            $line = $self->boldred("$indent$hotkey") . ": $value";
            say $line or croak;
        }

        # footer material
        my $default = $self->bold( $self->default_key );
        say "\n${indent}Default option: $default"                    or croak;
        say "\n$indent-- press a hotkey to select associated option" or croak;
        say "$indent-- press [Enter] to select default option"       or croak;
        say "$indent-- submenus are indicated by $token"             or croak;
        say "$indent-- press [Esc] to abort"                         or croak;
        print "\n${indent}Select option: "                           or croak;

        return;
    }

    # _hotkey_index()    {{{2
    #
    # does:   build and return hotkey hash
    # params: nil
    # prints: nil
    # return: hashref
    #         key   = hotkey
    #         value = arrayref (0=action {submenu,item}, 1=value)
    method _hotkey_index () {

        my %index;
        my @items = $self->items;
        for my $item (@items) {
            my $kind   = $item->kind;
            my $value  = $item->value;
            my $hotkey = $item->hotkey;
            $index{$hotkey} = [ $kind, $value ];
        }

        return {%index};
    }

    # _user_select()    {{{2
    #
    # does:   user makes menu selection
    # params: nil
    # prints: nil, except error messages
    # return: string (hotkey)
    method _user_select () {

        # get single character of input
        ## - source: https://stackoverflow.com/a/2685736
        #ReadMode('cbreak');
        #my $key = ReadKey(0);
        #ReadMode('normal');
        my $key = $self->get_char;

        # special cases
        my $ord = ord $key;
        if ( $ord == $ENTER_NUM )  { $key = $ENTER; }
        if ( $ord == $ESCAPE_NUM ) { $key = $ESCAPE; }

        return $key;
    };    # }}}2

}    # }}}1

{

    ## no critic (ProhibitMultiplePackages)
    package Dn::Clipboard;
    ## use critic

    use Moo;    # {{{1
    use strictures 2;
    use namespace::clean -except => [ '_options_data', '_options_config' ];
    use Carp qw(croak);
    use Clipboard;
    use Const::Fast;
    use Data::Dumper::Simple;
    use DateTime;
    use DateTime::TimeZone;
    use English qw(-no_match_vars);
    use Env     qw(HOME);
    use Function::Parameters;
    use JSON::MaybeXS;
    use MooX::HandlesVia;
    use MooX::Options protect_argv => 0;
    use Path::Tiny;
    use Syntax::Keyword::Try;
    use Types::Standard;

    with qw(Dn::Clipboard::Base);

    const my $TRUE      => 1;
    const my $FALSE     => 0;
    const my $CONF      => "$HOME/.config/i3/i3-my-load-clipboard-data.json";
    const my $TIME_ZONE => DateTime::TimeZone->new( name => 'local' )->name();
    const my $TODAY     => DateTime->now( time_zone => $TIME_ZONE );
    const my $ISO_8601  => $TODAY->ymd;
    my $full_date    = $TODAY->strftime('%d %B %Y');
    my $full_trim    = $full_date =~ s/\A0//rxsm;
    my $full_replace = $full_trim =~ s/\s/ /grxsm;
    const my $DATE_FULL => $full_trim;
    const my $FULL_NBSP => $full_replace;
    const my $RFC_EMAIL => $TODAY->strftime('%a, %d %b %Y %T %z');    # }}}1

    # options

    # temp_file (-t)    {{{1
    option 'temp_file' => (
        is       => 'ro',
        short    => 't',
        required => $TRUE,
        format   => 's@',
        default  => sub { [] },
        doc      => 'File to hold clipboard value (assumed to be empty)',
    );

    method _temp_file () {
        my @temp_files = @{ $self->temp_file };
        if ( not @temp_files ) { croak "No temporary filepath provided\n"; }
        if ( scalar @temp_files > 1 ) { warn "Ignoring extra arguments\n"; }
        my $file_obj = Path::Tiny::path( $temp_files[0] );
        return $file_obj;
    }                      # }}}1

    # attributes

    # _[add,get,has]_menu    {{{1
    has '_menus' => (
        is  => 'rw',
        isa => Types::Standard::HashRef [
            Types::Standard::InstanceOf ['Dn::Clipboard::Menu'],
        ],
        lazy        => $TRUE,
        default     => sub { {} },
        handles_via => 'Hash',
        handles     => {
            _add_menu => 'set',      # name => Dn::Clipboard::Menu
            _get_menu => 'get',      # name
            _has_menu => 'exists',
        },
        doc => 'Hash of menu objects',
    );    # }}}1

    # methods

    # main()    {{{1
    #
    # does:   main method
    # params: nil
    # prints: feedback
    # return: n/a, dies on failure
    method main () {

        # load menus
        $self->_load_menus;

        # user makes selection
        my $selection = $self->_select_from_menu('Main');
        my $action    = $selection->[0];

        # if user made selection
        if ( $action eq 'item' ) {

            # get user selection
            my $value = $selection->[1];

            # write to temp file
            my $temp = $self->_temp_file;
            $temp->spew($value)
                or croak "Unable to write clipboard value: $OS_ERROR\n";
        }

        return;
    }

    # _load_menus()    {{{1
    #
    # does:   load menu data from configuration file
    # params: nil
    # prints: nil
    # return: n/a, dies on failure
    method _load_menus () {

        # get menu data
        my $conf_fh       = Path::Tiny::path($CONF);
        my $conf_contents = $conf_fh->slurp;
        my $data;
        try {
            $data = JSON::MaybeXS::decode_json($conf_contents);
        }
        catch ($err) {
            $self->abort(
                'Invalid configuration data', q{},
                'JSON decoder reported:',     "$err",
            );
        }
        my $ref = ref $data;
        if ( $ref ne 'ARRAY' ) {
            $self->abort(
                'Invalid configuration file data',
                q{},
                "Expected ARRAY data, got: $ref",
            );
        }

        # process menu data
        my $menus = $self->_process_config_data( {}, 'Main', $data );
        if ( not keys %{$menus} ) {
            $self->abort(
                'Processing error',
                q{}, 'Unable to extract config data',
            );
        }

        # load menus
        for my $name ( keys %{$menus} ) {
            $self->_add_menu( $name, $menus->{$name} );
        }

        return;
    }

    # _process_config_data($menus, $name, $data)    {{{1
    #
    # does:   load menu data from configuration file
    # params: $menus - all menus [hashref of name => data]
    #         $name  - menu name [string]
    #         $data  - menu data [arrayref]
    # prints: nil
    # return: n/a, dies on failure
    method _process_config_data ( $menus, $name, $data ) {

        # check params
        my $ref;
        $ref = ref $menus;
        if ( $ref and ( $ref ne 'HASH' ) ) {
            $self->abort(
                'Invalid menus data',
                q{}, "Expected HASH menus data, got: $ref",
            );
        }
        $ref = ref $name;
        if ($ref) {
            $self->abort(
                'Invalid menu configuration',
                q{},
                "Expected string menu name, got: '$ref'",
            );
        }
        $ref = ref $data;
        if ( $ref and ( $ref ne 'ARRAY' ) ) {
            $self->(
                [   'Invalid menu data',
                    q{}, "Expected ARRAY menu data, got $ref",
                ]
            );
        }

        # date values
        my %dates;
        $dates{'%current_date_full%'}      = $DATE_FULL;
        $dates{'%current_date_full_nbsp%'} = $FULL_NBSP;
        $dates{'%current_date_iso%'}       = $ISO_8601;
        $dates{'%current_date_rfc%'}       = $RFC_EMAIL;

        # check for duplicate menu name
        if ( exists $menus->{$name} ) {
            $self->abort(
                'Invalid menu configuration',
                q{},
                "Duplicate menu name: '$name'",
            );
        }
        $menus->{$name} = Dn::Clipboard::Menu->new();

        # process menu entries
        my @options = @{$data};
        for my $option (@options) {

            # must be single-pair hashref
            $ref = ref $option;
            if ( not $ref ) {
                $self->abort(
                    "Invalid configuration of $name menu",
                    q{},
                    "Expected HASH option data, got scalar: ('$option')",
                );
            }
            if ( $ref ne 'HASH' ) {
                $self->abort(
                    "Invalid configuration of $name menu",
                    q{},
                    "Expected HASH option data, got: $ref",
                );
            }
            my %pair  = %{$option};
            my $count = scalar keys %pair;
            if ( $count != 1 ) {
                $self->abort(
                    "Invalid configuration of $name menu",
                    q{},
                    "Expected single option, got: $count",
                );
            }

            # get menu item components
            my $key   = ( keys %pair )[0];
            my $value = $pair{$key};
            $ref = ref $value;

            # value must be scalar (string) or arrayref
            if ( $ref and ( $ref ne 'ARRAY' ) ) {
                $self->abort(
                    "Invalid configuration of $name menu",
                    q{},
                    "Expected scalar or ARRAY option value, got: $ref",
                );
            }

            my ( $option_hotkey, $option_value, $item_type );

            # process simple menu item
            if ( not $ref ) {

                $option_hotkey = $key;
                $option_value  = $value;
                $item_type     = 'item';

                # handle date tokens
                if ( exists $dates{$value} ) {
                    $option_value = $dates{$value};
                }
            }

            # process submenu
            if ( $ref and ( $ref eq 'ARRAY' ) ) {
                my ( $submenu_name, $submenu_hotkey ) = split /;/xsm, $key;
                if ( not $submenu_name or not $submenu_hotkey ) {
                    $self->abort(
                        "Invalid configuration of $name menu",
                        q{},
                        "Invalid submenu key: '$key'",
                    );
                }
                my $submenu_data = $value;
                $menus = $self->_process_config_data( $menus, $submenu_name,
                    $submenu_data, );

                # add submenu entry to current (parent) menu
                $option_hotkey = $submenu_hotkey;
                $option_value  = $submenu_name;
                $item_type     = 'submenu';
            }

            # ensure hotkey is only 1 char
            my $key_len = length $option_hotkey;
            if ( $key_len != 1 ) {
                $self->abort(
                    "Invalid configuration of $name menu",
                    q{},
                    'Expected 1 hotkey char,'
                        . " got $key_len: '$option_hotkey'",
                );
            }

            # no duplicate hotkeys allowed
            if ( $menus->{$name}->has_hotkey($option_hotkey) ) {
                $self->abort(
                    "Invalid configuration of $name menu",
                    q{},
                    "Duplicate hotkey: '$option_hotkey'",
                );
            }

            # create menu item
            my $menu_option = Dn::Clipboard::Menu::Item->new(
                kind   => $item_type,
                hotkey => $option_hotkey,
                value  => $option_value,
            );

            # add menu item
            $menus->{$name}->add_item($menu_option);

            # make default menu option if none yet set
            if ( not $menus->{$name}->default_key ) {
                $menus->{$name}->default_key($option_hotkey);
            }

        }

        return $menus;

    }

    # _select_from_menu($name)    {{{1
    #
    # does:   select item from menu
    # params: $name - menu name
    # prints: nil, except error messages
    # return: arrayref
    #         0 = action = {item,escape}
    #         1 = value  = item string or null
    # notes:  function may recurse if user selects a submenu
    method _select_from_menu ($name) {

        # select from menu
        my $menu      = $self->_get_menu($name);
        my $selection = $menu->choose($name);

        # process selection
        my $action = $selection->[0];

        # - escape if user aborted
        if ( $action eq 'escape' ) {
            return ['escape'];
        }

        # - recurse if submenu selected
        if ( $action eq 'submenu' ) {
            my $submenu           = $selection->[1];
            my $submenu_selection = $self->_select_from_menu($submenu);
            my $submenu_action    = $submenu_selection->[0];

            # if user aborted submenu, redo current menu
            if ( $submenu_action eq 'escape' ) {
                return $self->_select_from_menu($name);
            }

            # if user selected submenu item, pass to caller
            if ( $submenu_action eq 'item' ) {
                return $submenu_selection;
            }
        }

        # - return selection if user selected a menu item
        if ( $action eq 'item' ) {
            return $selection;
        }

        return;
    };    # }}}1

}

my $p = Dn::Clipboard->new_with_options->main;

1;

# POD    {{{1
__END__

=encoding utf8

=head1 NAME

i3-my-load-clipboard-engine - load selected value into system clipboard

=head1 USAGE

B<i3-my-load-clipboard-engine> B<-t> I<filepath>

B<i3-my-load-clipboard-engine -h>

=head1 REQUIRED ARGUMENTS

Nil.

=head1 REQUIRED OPTIONS

=over

=item B<-t>  B<--temp_file>

Path to a temporary file to which is written the selected copy value. It is
intended that this script's wrapper script will capture that value and write it
to the system clipboard. The file is assumed to be empty, i.e., created by a
process such as the shell command C<mktemp>.

Required. No default value.

=back

=head1 OPTIONS

=over

=item B<-h>

Display help and exit.

=back

=head1 DESCRIPTION

The user selects from menus of pre-defined options. The selected option is
loaded into the system clipboard.

A submenu is indicated by an option with an appended '-->'. Selecting such an
option opens a submenu.

Menu options have a one character prefix (a hotkey) to enable quick option
selection.

=head2 Invoking

This script is intended to be invoked by a wrapper script called
S<<F<i3-my-load-clipboard>>>. This is to overcome limitations in i3wm which
prevent this script from:

=over

=item *

Being invoked directly from a binding

=item *

Writing successfully to the system clipboard.

=back

To overcome the second limitation this script writes the clipboard value to a
temporary file which the wrapper script then reads and sends to the system
clipboard.

=head1 DIAGNOSTICS

No diagnostic messages are displayed during routine script use.

=head1 DEPENDENCIES

=head2 Perl modules

Carp, Clipboard, Const::Fast, DateTime, DateTime::TimeZone, English,
Function::Parameters, Moo, MooX::HandlesVia, MooX::Options, namespace::clean,
Path::Tiny, strictures, Term::ANSIColor, Term::Cap, Term::ReadKey,
Types::Standard, version.

=head1 CONFIGURATION

=head2 Menus

The menu content is defined in configuration file S<<F<~/.config/i3/i3-my-load-clipboard-data.json>>>. The general structure of the menu is:

  [
    {"a": "Item 1"},
    {"b": "Item 2"},
    {"Submenu;c": [
      {"p": "Submenu item 1"},
      {"r": "Submenu item 2"}
    ]},
    {"c": "Item 3"},
    {"d": "Item 4"}
  ]

While the structure is largely self-explanatory, its major features are:

=over

=item *

The data is valid JSON.

=item *

The outer data structure is an array.

=item *

Each menu item is a single name-value object. (In perl a JSON object is known
as a hash. In other languages it is an associative array.)

=item *

The name (or key) for each menu item is a single character 'hotkey'. This
hotkey must be unique within each (sub)menu.

=item *

A submenu has a name (or key) composed of the menu name and hotkey joined by a
semicolon. The menu name must be unique.

=item *

A submenu has a JSON array as its value. This array has the same structure as
the outer array.

=item *

The name of the outer menu cannot be defined in the configuration file. It
defaults to 'Main'.

=item *

There are special tokens which signify the current date in a particular format.
The menu item value must contain only the token string with no additional
characters. The available tokens are:

=over

=item %current_date_full%

Example: 1 December 2022

=item %current_date_full_nbsp%

As for %current_date_full% except that spaces are replaced with non-breaking
spaces.

=item %current_date_iso%

Example: 2022-12-01

=item %current_date_rfc%

Example: Thu,  1 Dec 2022 18:51:37 +0930

The system time zone is used and day numbers less than 10 have a leading space.

=back

=back

=head2 i3wm

In the i3 window manager the wrapper script can be invoked from a binding that
can be set in the F<config> file. For example, to launch it with the F2 key use
the following configuration command:

  set $loader_launcher ~/.local/bin/i3-my-load-clipboard
  bindsym F2 exec --no-startup-id $loader_launcher

The wrapper script launches this script in an alacritty instance. To ensure the
terminal window is free-floating add a line like this to the i3wm F<config>
file:

  for_window [class="Clipboard_Loader" instance="Clipboard_Loader"] \
              floating enable, resize set 1000 600

Adjust the 'class' and 'instance' values as appropriate.

If the picom compositor is being used add a line like the following to its
F<picom.conf> file to ensure the alacritty terminal is opaque:

  opacity-rule = [ "100:class_g *?= 'Clipboard_Loader'" ];

Adjust the 'class' value as appropriate.

=head1 INCOMPATIBILITIES

There are no known incompatibilities.

=head1 EXIT STATUS

The exit code is 0 for successful execution and 1 if the script does a
controlled exit following an error. If the script crashes unexpectedly the
error code is that given by the system.

=head1 BUGS AND LIMITATIONS

Please report any bugs to the author.

=head1 AUTHOR

David Nebauer (david at nebauer dot org)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2022 David Nebauer (david at nebauer dot org)

This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut
# vim:foldmethod=marker:
