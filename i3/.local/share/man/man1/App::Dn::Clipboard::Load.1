.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Load 3"
.TH Load 3 2025-03-26 "perl v5.40.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
App::Dn::Clipboard::Load \- load selected value into system clipboard
.SH VERSION
.IX Header "VERSION"
This documentation applies to App::Dn::Clipboard::Load version 0.2.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use App::Dn::Clipboard::Load;
\&
\&    App::Dn::Clipboard::Load\->new_with_options\->run;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The user selects from menus of pre-defined options. The selected option is
loaded into the system clipboard.
.PP
A submenu is indicated by an option with an appended '\-\->'. Selecting such an
option opens a submenu.
.PP
Menu options have a one character prefix (a hotkey) to enable quick option
selection.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
.SS Properties
.IX Subsection "Properties"
None.
.SS "Configuration files"
.IX Subsection "Configuration files"
The menu content is defined in configuration file
\&\fI~/.config/load\-clipboard\-data.json\fR.
.PP
The general structure of the menu is:
.PP
.Vb 10
\&    [
\&      {
\&        "menu": "Main",
\&        "hotkey": "i",
\&        "type": "option",
\&        "value": "david@nebauer.id.au",
\&        "default": 1
\&      },
\&      ...
\&      {},
\&      {},
\&      {},
\&      ...
\&      {
\&        "menu": "Email",
\&        "hotkey": "i",
\&        "type": "option",
\&        "value": "david@nebauer.id.au",
\&        "default": 0
\&      },
\&      ...
\&    ]
.Ve
.PP
While the structure is largely self-explanatory, its major features are:
.IP \(bu 4
The data is valid JSON.
.IP \(bu 4
The outer data structure is an array.
.IP \(bu 4
Each menu item is a single hashref. (In perl a JSON object is known
as a hash. In other languages it is an associative array.)
.IP \(bu 4
Each menu item hashref must have the following keys:
.RS 4
.IP menu 4
.IX Item "menu"
Can be anything, but is traditionally a single word with initial
capitalisation. All items with the same menu name belong to that menu \-
this is how menus are defined.
.Sp
The base menu, that is, the first menu to display when this module is run,
is called "Main". This menu must be defined in the configuration file.
It is defined by having at least one menu item with a \f(CW\*(C`menu\*(C'\fR value of "Main".
.Sp
All menus except the "Main" menu must be called by at least one menu item
(see the \f(CW\*(C`submenu\*(C'\fR menu item key).
.Sp
Scalar string. Required.
.IP hotkey 4
.IX Item "hotkey"
This single character must be unique within a menu. Char. Required.
.IP type 4
.IX Item "type"
Indicate whether the menu item represents a value for loading into the
clipboard or represents a submenu.
String. Required. Valid values: 'option', 'submenu'.
.IP value 4
.IX Item "value"
This is either the text string to be loaded into the clipboard
(for \f(CW\*(C`type\*(C'\fR = "option") or the name of a submenu to be invoked
(\f(CW\*(C`type\*(C'\fR = "submenu").
All called submenu names must correspond to defined menus
(see the \f(CW\*(C`menu\*(C'\fR menu item key).
An "option" value is displayed in the menu item without alteration.
A "submenu" value is displayed in the menu item with a trailing " \-\->".
.Sp
For "option" values there are special tokens which signify the current date in
a particular format. The menu item value must contain only the token string
with no additional characters.
.Sp
Available date tokens are:
.RS 4
.ie n .IP \fR\fI%current_date_full\fR\fI%\fR 4
.el .IP \fR\f(CI%current_date_full\fR\fI%\fR 4
.IX Item "%current_date_full%"
Example: 1 December 2022
.ie n .IP \fR\fI%current_date_full_nbsp\fR\fI%\fR 4
.el .IP \fR\f(CI%current_date_full_nbsp\fR\fI%\fR 4
.IX Item "%current_date_full_nbsp%"
As for "%current_date_full%" except that spaces are replaced with
non-breaking spaces
.ie n .IP \fR\fI%current_date_iso\fR\fI%\fR 4
.el .IP \fR\f(CI%current_date_iso\fR\fI%\fR 4
.IX Item "%current_date_iso%"
Example: 2022\-12\-01
.ie n .IP \fR\fI%current_date_rfc\fR\fI%\fR 4
.el .IP \fR\f(CI%current_date_rfc\fR\fI%\fR 4
.IX Item "%current_date_rfc%"
Example: Thu,  1 Dec 2022 18:51:37 +0930
.Sp
The system time zone is used and day numbers less than 10 have a leading space.
.RE
.RS 4
.RE
.IP default 4
.IX Item "default"
Whether the menu item is the default selection for the menu.
At least one menu item per menu can have a true value.
No more than one menu item per menu can have a true value.
Required. Boolean. By convention 1 is true while 0 is false.
.RE
.RS 4
.RE
.PP
Menu item hashrefs from different lists can be interspersed with each other,
but the order of menu items in each menu reflects the order of the
underlying hashrefs in the configuration file.
.PP
Empty hashrefs are ignored. If all item hashrefs are grouped according to menu,
the grouped items from each menu can be separated by multiple empty hashrefs
as shown in the example above.
.SS "Environment variables"
.IX Subsection "Environment variables"
None used.
.SS "i3 window manager"
.IX Subsection "i3 window manager"
In the i3 window manager the wrapper script can be invoked from a binding that
can be set in the \fIconfig\fR file. For example, to launch it with the F2 key use
the following configuration command:
.PP
.Vb 2
\&    set $loader_launcher ~/.local/bin/i3\-my\-load\-clipboard
\&    bindsym F2 exec \-\-no\-startup\-id $loader_launcher
.Ve
.PP
The wrapper script launches this script in an alacritty instance. To ensure the
terminal window is free-floating add a line like this to the i3wm \fIconfig\fR
file:
.PP
.Vb 2
\&    for_window [class="Clipboard_Loader" instance="Clipboard_Loader"] \e\e
\&               floating enable, resize set 1000 600
.Ve
.PP
Adjust the \f(CW\*(C`class\*(C'\fR and \f(CW\*(C`instance\*(C'\fR values as appropriate.
.PP
If the picom compositor is being used add a line like the following to its
\&\fIpicom.conf\fR file to ensure the alacritty terminal is opaque:
.PP
.Vb 1
\&    opacity\-rule = [ "100:class_g *?= \*(AqClipboard_Loader\*(Aq" ];
.Ve
.PP
Adjust the \f(CW\*(C`class\*(C'\fR value as appropriate.
.SH SUBROUTINES/METHODS
.IX Header "SUBROUTINES/METHODS"
.SS \fBrun()\fP
.IX Subsection "run()"
The only public method. This method enables the loading of a selected value
into the system clipboard as described in "DESCRIPTION".
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.SS "Expected arrayref config data, got a non-ref"
.IX Subsection "Expected arrayref config data, got a non-ref"
.SS "No configuration data retrieved"
.IX Subsection "No configuration data retrieved"
These fatal errors indicate problems retrieving configuration data.
Additional errors may be generated by the App::Dn::Clipboard::Config module.
.SS "Config item NUMBER has an empty 'KEY' value"
.IX Subsection "Config item NUMBER has an empty 'KEY' value"
.SS "Config item NUMBER has invalid type 'ITEM_TYPE'"
.IX Subsection "Config item NUMBER has invalid type 'ITEM_TYPE'"
.SS "Config item NUMBER is missing a 'key' key"
.IX Subsection "Config item NUMBER is missing a 'key' key"
.SS "Menu 'CALLED_MENU' is called but not defined in config data"
.IX Subsection "Menu 'CALLED_MENU' is called but not defined in config data"
.SS "Menu 'DEFINED_MENU' is defined but not called in config data"
.IX Subsection "Menu 'DEFINED_MENU' is defined but not called in config data"
.SS "Menu 'MENU_NAME' has NUMBER default items"
.IX Subsection "Menu 'MENU_NAME' has NUMBER default items"
.SS "Menu 'MENU_NAME' has NUMBER items with hotkey 'HOTKEY'"
.IX Subsection "Menu 'MENU_NAME' has NUMBER items with hotkey 'HOTKEY'"
.SS "Menu 'MENU_NAME' has NUMBER items with value 'VALUE'"
.IX Subsection "Menu 'MENU_NAME' has NUMBER items with value 'VALUE'"
.SS "Menu 'MENU_NAME' has no default item"
.IX Subsection "Menu 'MENU_NAME' has no default item"
These fatal errors indicate validity problems with the menu and menu item data
defined in the configuration file.
.PP
\&\fISubsidiary modules may emit their own warning and error messages.\fR
.SH INCOMPATIBILITIES
.IX Header "INCOMPATIBILITIES"
There are no known incompatibilities.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs to the author.
.SH DEPENDENCIES
.IX Header "DEPENDENCIES"
.SS "Perl modules"
.IX Subsection "Perl modules"
App::Dn::Clipboard::Config, App::Dn::Clipboard::MenuItem,
App::Dn::Clipboard::MenuItems, Clipboard, Const::Fast, Moo, MooX::HandlesVia,
MooX::Options, namespace::clean, strictures.
.SH AUTHOR
.IX Header "AUTHOR"
David Nebauer <mailto:david@nebauer.org>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2022 David Nebauer <mailto:david@nebauer.org>
.PP
This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
