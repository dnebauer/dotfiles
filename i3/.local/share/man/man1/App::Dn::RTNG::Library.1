.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Library 3"
.TH Library 3 2025-03-18 "perl v5.40.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
App::Dn::RTNG::Library \- common subroutines used by Radiotray NG controller scripts
.SH VERSION
.IX Header "VERSION"
This documentation is for \f(CW\*(C`App::Dn::RTNG::Library\*(C'\fR version 0.1.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use App::Dn::RTNG::Library;
\&
\&    my $lib = App::Dn::RTNG::Library\->new;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Common subs used by Radiotray NG controller scripts.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
.SS Properties
.IX Subsection "Properties"
None.
.SS Attributes
.IX Subsection "Attributes"
None.
.SS "Configuration files"
.IX Subsection "Configuration files"
Uses a configuration file with the file name stem 'rtng\-play\-change' placed in
one of the usual configuration file locations.
(See File::ConfigDir and Config::Any for further details.)
.PP
Any of the file formats supported by Config::Any can be used.
Configuration support is limited to default volume set on a per station basis.
There must be a section called 'volume' within which are key:value pairs where
keys are station names and values are corresponding volumes.
The volume values can be any format supported by \f(CW\*(C`pactl\*(C'\fR.
.PP
Here is an example configuration file located in
\&\fR\f(CI$HOME\fR\fI/.config/rtng\-play\-change.json\fR:
.PP
.Vb 6
\&    {
\&      "volume": {
\&        "ABC Country": "40%",
\&        "Country 108": "25%"
\&      }
\&    }
.Ve
.SS "Environment variables"
.IX Subsection "Environment variables"
None used.
.SH SUBROUTINES/METHODS
.IX Header "SUBROUTINES/METHODS"
.SS capture_command_output($cmd)
.IX Subsection "capture_command_output($cmd)"
Run system command and capture output.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.ie n .IP $cmd 4
.el .IP \f(CW$cmd\fR 4
.IX Item "$cmd"
Command to run. Arrayref. Required.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Nil.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
Dn::Common::CommandResult object.
.PP
\fINote\fR
.IX Subsection "Note"
.PP
The returned object can provide stdout output, stderr output and full output
(stdout and stderr combined as initially output). In each case, the output is
provided as a list, with each list element being a line of original output.
.SS "config($key, [$section])"
.IX Subsection "config($key, [$section])"
Extract a configuration value from a configuration file.
All the usual configuration directories are searched for configuration files
whose names contain the stem "rtng-play-change".
If multiple matching configuration files are found, the first is used while
the others are ignored.
(See File::ConfigDir and Config::Any for further details.)
.PP
If multiple configuration files are located, the first found is used.
The user is warned which configuration file is used and which are ignored.
.PP
Configuration files with and without sections are supported.
Provide a \f(CW\*(C`section\*(C'\fR value only if the configuration file has sections,
that is, there is no need to use a dummy section name if sections are not used.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.ie n .IP $key 4
.el .IP \f(CW$key\fR 4
.IX Item "$key"
Configuration file key whose value is extracted. Scalar string. Required.
.ie n .IP $section 4
.el .IP \f(CW$section\fR 4
.IX Item "$section"
Configuration file section in which to find desired key value. Scalar string.
Optional.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Warning and error feedback.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
Scalar configuration value or boolean false.
.SS \fBgroup_names()\fP
.IX Subsection "group_names()"
Provides the names of all bookmarked radio station groups.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.PP
Nil.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Nil.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
List of group names.
.SS group_station_names($name)
.IX Subsection "group_station_names($name)"
Provides names of bookmarked radio stations in a specified bookmark group.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.PP
Nil.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Nil.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
List of station names.
.SS \fBinterface()\fP
.IX Subsection "interface()"
Provides an object encapsulating the "com.github.radiotray_ng" service.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.PP
Nil.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Error feedback.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
An object encapsulating the "com.github.radiotray_ng" service.
The object is of class "Net::DBus::RemoteObject".
.SS notify($msg)
.IX Subsection "notify($msg)"
Display a message string as a system notification.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.ie n .IP $msg 4
.el .IP \f(CW$msg\fR 4
.IX Item "$msg"
The message to display. Scalar string. Required.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Error feedback.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
N/A. Dies on failure.
.SS \fBplayer_artist()\fP
.IX Subsection "player_artist()"
Get the playing or last played artist name.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.PP
Nil.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Error feedback.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
String.
.SS \fBplayer_playing()\fP
.IX Subsection "player_playing()"
Determine whether the Radiotray NG player is currently playing.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.PP
Nil.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Error feedback.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
Boolean.
.SS \fBplayer_station()\fP
.IX Subsection "player_station()"
Get the playing or last played station name.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.PP
Nil.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Error feedback.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
String.
.SS \fBplayer_stopped()\fP
.IX Subsection "player_stopped()"
Determine whether the Radiotray NG player is currently stopped.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.PP
Nil.
.PP
\fIPrintsl\fR
.IX Subsection "Printsl"
.PP
Error feedback.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
Boolean.
.SS \fBplayer_title()\fP
.IX Subsection "player_title()"
Get the playing or last played track title.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.PP
Nil.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Error feedback.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
String.
.SS run_command($cmd)
.IX Subsection "run_command($cmd)"
Run a shell command.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.ie n .IP $cmd 4
.el .IP \f(CW$cmd\fR 4
.IX Item "$cmd"
Shell command. Arrayref. Required.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Error feedback.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
N/A. Dies if command exits with an error status.
.SS \fBset_volume()\fP
.IX Subsection "set_volume()"
Set system volume using \f(CW\*(C`pactl\*(C'\fR.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.ie n .IP $station 4
.el .IP \f(CW$station\fR 4
.IX Item "$station"
Name of station. String. Required.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Warning and error messages.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
N/A.
.SS \fBstatus_message()\fP
.IX Subsection "status_message()"
Construct a message reporting the current state of the Radiotray\ NG player.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.PP
Nil.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Nil.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
Scalar string.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.SS "Cannot run without 'pactl'"
.IX Subsection "Cannot run without 'pactl'"
This error occurs if the \f(CW\*(C`set_volume\*(C'\fR function is called and \f(CW\*(C`pactl\*(C'\fR is not
available on the system.
.SS "Multiple configuration files located based on stem 'STEM'"
.IX Subsection "Multiple configuration files located based on stem 'STEM'"
.SS "Using: FILEPATH"
.IX Subsection "Using: FILEPATH"
.SS "Ignoring: FILEPATH(S)"
.IX Subsection "Ignoring: FILEPATH(S)"
These non-fatal error warning messages are shown when multiple configuration
files are found with the name stem "rtng-play-change".
See \f(CW\*(C`Config::Any\*(C'\fR for more details on what file names are searched for.
.SS "No command provided"
.IX Subsection "No command provided"
.SS "Command is not an arrayref"
.IX Subsection "Command is not an arrayref"
.SS "No command arguments provided"
.IX Subsection "No command arguments provided"
These errors occur if the shell command provided to be executed is empty or of
the wrong data type.
.SS "No configuration directories located"
.IX Subsection "No configuration directories located"
This is a non-fatal warning that occurs when no configuration directories are
located. This should never happen on a sane *nix system.
See \f(CW\*(C`File::ConfigDir\*(C'\fR for more details about the target directories.
.SS "No configuration files located"
.IX Subsection "No configuration files located"
This is a non-fatal warning that occurs when no configuration files having the
name stem "rtng-play-change" are found in common configuration directories.
See Config::Any for more details about the search used.
.SS "No default volume configured"
.IX Subsection "No default volume configured"
This warning is issued if the configuration file has no station-independent
default volume specified. Note that the \f(CW\*(C`config\*(C'\fR method only looks for a
station-independent default volume if it is unable to find a station-specific
default volume.
.SS "No status data extracted"
.IX Subsection "No status data extracted"
This fatal error occurs if an attempt to extract player status data from
Radiotray NG failed.
.SS "No volume configured for station 'STATION'"
.IX Subsection "No volume configured for station 'STATION'"
The non-fatal warning is displayed if the configuration file used does not
specify a default volume for the specified station.
.SS org.freedesktop.DBus.Error.ServiceUnknown
.IX Subsection "org.freedesktop.DBus.Error.ServiceUnknown"
The full error is:
.PP
.Vb 2
\&    org.freedesktop.DBus.Error.ServiceUnknown:
\&    The name com.github.radiotray_ng was not provided by any .service files
.Ve
.PP
The commonest cause of this error is that Radiotray NG is not running.
.SS "Stopping execution due to error"
.IX Subsection "Stopping execution due to error"
.SS "No error message available"
.IX Subsection "No error message available"
These fatal error messages may be displayed when a shell command exits with an
error status.
.SS "Unable to determine player state"
.IX Subsection "Unable to determine player state"
Occurs when the script is unable to determine from Radiotray NG player state
data whether it is currently playing or stopped.
.SH INCOMPATIBILITIES
.IX Header "INCOMPATIBILITIES"
There are no known incompatibilities.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs to the author.
.SH DEPENDENCIES
.IX Header "DEPENDENCIES"
.SS "Perl modules"
.IX Subsection "Perl modules"
App::Dn::RTNG::CommandResult, App::Dn::RTNG::Station, App::Dn::RTNG::Stations,
Carp, Config::Any, Const::Fast, Desktop::Notify, File::ConfigDir, IPC::Cmd,
JSON::MaybeXS, Moo, MooX::HandlesVia, namespace::clean, Net::DBus, strictures,
Types::Standard, version.
.SH AUTHOR
.IX Header "AUTHOR"
David Nebauer <mailto:david@nebauer.org>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2025 David Nebauer <mailto:david@nebauer.org>
.PP
This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
