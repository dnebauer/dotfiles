#!/usr/bin/env bash

# File: pil4e
# Author: David Nebauer
# Purpose: display "Programming in Lua (Fourth edition)"
#          with nanoc web server
# Created: 2021-08-19

# ERROR HANDLING    {{{1

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace

# VARIABLES    {{{1

self="$(basename "$0")"
usage='Usage:'
parameters='[-v] [-d] [-s]'
# what follows are the variables used to build the various commands executed
# by the script -- bear the following in mind when reviewing them:
# 1. Command templates include placeholder tokens
#    which are later substituted for appropiate variables
# 2. A terminal is launched and from within that terminal
#    the html server is launched
# 3. The command used to launch the terminal and html server is:
#        ${terminal_cmd} "${server_cmd}" &
#    where ${terminal_cmd} launches the terminal, and ${server_cmd}
#    launches the html server, and it will be apparent that
#    ${terminal_cmd} must end in such a way that the next string
#    expected is the command to execute within the terminal
# 3. The command used to launch the client is:
#        ${client_cmd} > /dev/null 2>&1 &
# - name of site to be launched
site_name='Programming in Lua (Fourth edition)'
# - location in which to start server
site_dir="$HOME/data/computing/languages/lua/programming-lua-4th-ed/html"
# - terminal in which to launch html server
terminal='alacritty'
# - terminal options
#   '-qwindowtitle' 'launcher_pil4e'
terminal_opts_template_array=(
	'-t' 'launcher_pil4e'
	'--working-directory' '%SITE_DIR%'
	'-e'
)
terminal_opts_template="${terminal_opts_template_array[*]}"
# - command to invoke terminal
terminal_cmd_template="$terminal $terminal_opts_template"
# - perform variable substitutions
terminal_cmd="$terminal_cmd_template"
terminal_cmd="${terminal_cmd//%SITE_DIR%/$site_dir}"
# - html server executable name
server='Nanoc'
server_exe='nanoc'
# - use default nanoc port
port='3000'
# - server command option used if adsf-live gem package is installed
live=''
if command -v gem &>/dev/null; then
	installed="$(sudo gem list --local --installed --exact --quiet adsf-live)"
	# note space in $live to separate options on command line
	[[ "$installed" = 'true' ]] && live=' --live-reload'
fi
server_cmd_template='%SERVER_EXE% view --port=%PORT%%LIVE%'
# - perform variable substitutions
server_cmd="${server_cmd_template}"
server_cmd="${server_cmd//%SERVER_EXE%/$server_exe}"
server_cmd="${server_cmd//%PORT%/$port}"
server_cmd="${server_cmd//%LIVE%/$live}"
# - browser to run nanoc client
browser='qutebrowser'
# - url to open nanoc client in browser
url_template='http://localhost:%PORT%'
# - perform variable substitutions
url="$url_template"
url="${url//%PORT%/$port}"
# - command to launch nanoc client
client_cmd_template='%BROWSER% %URL%'
# - perform variable substitutions
client_cmd="$client_cmd_template"
client_cmd="${client_cmd//%BROWSER%/$browser}"
client_cmd="${client_cmd//%URL%/$url}"
# note: the grep matcher matches the *entire* process command
# - matching string for finding the server command in ps output
grep_matcher="$terminal_cmd $server_cmd"
# - whether to echo shell cmds to stdout
show_cmd=false
# - whether connected to a terminal
connected_to_terminal=false
unset -v client_cmd_template server_cmd_template \
	terminal_cmd_template terminal_opts_template_array \
	terminal_opts_template url \
	url_template
# tools whose absence will cause a fatal error
required_tools=(
	"$terminal"
	"$browser"
	"$server_exe"
	getopt
	grep
	dn-tk-info
	dn-tk-error
) # }}}1

# PROCEDURES

# display_usage() -> void    {{{1
#   params: nil
#   prints: nil
#   return: nil
display_usage() {
	cat <<_USAGE
${self}: display "$site_name" with nanoc web server

Launches a terminal ($terminal) in which the html server
($server_exe) is started in the site directory
($site_dir)
containing the content of
"$site_name".

Once the server is running a web browser ($browser) is
launched which connects with the web server. The web server
and browser communicate over port $port.

${usage} ${self} ${parameters}
       ${self} -h

Options: -s,--showcmd = echo shell commands to stdout
         -h,--help    = display help
         -v,--verbose = print input lines as they are read
                        (set -o verbose)
         -d,--debug   = print commands and args as executed
                        (set -o xtrace)
_USAGE
}

# process_options() -> void    {{{1
#   params: all command line parameters
#   prints: feedback
#   return: nil
process_options() {
	# read the command line options
	local OPTIONS
	if ! OPTIONS="$(
		getopt \
			--options hvds \
			--long showcmd,help,verbose,debug \
			--name "${BASH_SOURCE[0]}" \
			-- "${@}"
	)"; then
		# getopt displays errors
		exit 1
	fi
	eval set -- "${OPTIONS}"
	while true; do
		case "${1}" in
		-s | --showcmd)
			show_cmd=true
			shift 1
			;;
		-h | --help)
			display_usage
			exit 0
			;;
		-v | --verbose)
			set -o verbose
			shift 1
			;;
		-d | --debug)
			set -o xtrace
			shift 1
			;;
		--)
			shift
			break
			;;
		*) break ;;
		esac
	done
}

# join_by() -> void    {{{1
#   params: 1  - delimiter
#           2+ - items to be joined
#   prints: string containing joined items
#   return: nil
function join_by() {
	local d=$1
	shift
	local f=$1
	shift
	printf %s "$f" "${@/#/$d}"
}

# determine_terminal_connection() -> bool   {{{1
#
#     does: determine whether script is connected to a terminal
#   params: nil
#   prints: nil
# displays: nil
#  returns: nil
function determine_terminal_connection {
	# on KDE Plasma 5 the '-t -p' test used below does not work,
	# so as temporary workaround brute force a false result
	if [[ "${XDG_CURRENT_DESKTOP:-}" = 'KDE' ]]; then
		connected_to_terminal=false
		return
	fi

	# '-t 0' means stdin is open and refers to a terminal
	# '-p /dev/stdin' means stdin exists and is a pipe (socket)
	local interactive=false fd=0
	[[ -t "$fd" || -p /dev/stdin ]] && interactive=true
	# set connection flag
	connected_to_terminal=$interactive
}

# feedback($msg_type, $msg1[, ...]) -> void    {{{1
#
#     does: display messages, in terminal if present,
#           otherwise via a notification
#   params: $msg_type - message type [required, must be 'fatal' or 'info']
#           $msg1+    - message strings [required]
#   prints: message if connected to terminal
# displays: first message string only, as a notification,
#           if not connected to terminal
#  returns: nil
#     note: the gui dialog displays the first message as a header, so it
#           should be a summary of the message
function feedback {
	# param 1 = $msg_type
	local msg_type
	msg_type="$1"
	shift
	# param 2+ = $msg, ...
	local -a msgs
	while [[ -n "${1+x}" ]]; do
		msgs+=("$1")
		shift
	done
	# print messages if connected to a terminal
	if $connected_to_terminal; then
		local output
		for msg in "${msgs[@]}"; do
			output="$self:"
			[[ "$msg_type" == 'fatal' ]] && output+=' fatal:'
			output+=" $msg"
			case $msg_type in
			fatal) echo "$output" >/dev/stderr ;;
			info) echo "$output" ;;
			*)
				echo "Invalid message type '$msg_type'" >/dev/stderr
				exit
				;;
			esac
		done
		return
	fi
	# display in dialog box if not connected to a terminal
	caption="${msgs[0]}"
	msgs=("${msgs[@]:1}")
	detail="$(join_by '\n' "${msgs[@]}")"
	if [[ "$msg_type" == 'fatal' ]]; then
		dn-tk-error --title "$self" --caption "$caption" --detail "$detail"
	else
		dn-tk-info --title "$self" --caption "$caption" --detail "$detail"
	fi
}

# fb_fatal($msg1[, ...]) -> void    {{{1
#
#     does: echo/display fatal error messages and abort (exit) script
#   params: $msg1+ - error message strings [required]
#   prints: error messages if connected to terminal
# displays: notification message if not connected to terminal
#  returns: nil
function fb_fatal {
	feedback 'fatal' "$@"
	exit
}

# fb_info($msg1[, ...]) -> void    {{{1
#
#     does: echo/display messages and abort (exit) script
#   params: $msg1+ - error message strings [required]
#   prints: messages if connected to terminal
# displays: notification message if not connected to terminal
#  returns: nil
function fb_info {
	feedback 'info' "$@"
}

# fb_wait_for_server_start() -> void    {{{1
#
#     does: pause execution till html server is running
#   params: nil
#   prints: message if connected to terminal
# displays: message if dn-tk-info available, otherwise notification,
#           if not connected to terminal
#  returns: nil
function fb_wait_for_server_start {
	local msg_term
	msg_term='When the nanoc server is running, '
	msg_term+='press any button to open client'
	if $connected_to_terminal; then
		read -r -s -n 1 -p "$self: $msg_term"
		echo ''
	else
		sleep 1 # ensure server terminal has opened so dlg gets focus
		fb_info "Waiting for $server server" \
			"When $server server is running, " \
			"press [OK] to open client in $browser"
	fi
} # }}}1

# MAIN

# determine whether connected to terminal    {{{1
# - this comes first because it is needed by fb_fatal,
#   which is used in the next step
determine_terminal_connection

# check for required tools    {{{1
missing=()
for tool in "${required_tools[@]}"; do
	command -v "${tool}" &>/dev/null || missing+=("${tool}")
done
[[ ${#missing[@]} -eq 0 ]] ||
	fb_fatal "Need required tools to run" \
		"Cannot locate: $(join_by ', ' "${missing[@]}")"
unset missing tools required_tools

# process command line options    {{{1
process_options "${@}"
unset port server_exe site_name terminal

# check that site directory is valid    {{{1
if [ ! -d "$site_dir" ]; then
	fb_fatal 'Need site directory to run' \
		"Cannot locate site directory: $site_dir"
fi
unset -v site_dir

# check server is not already running    {{{1
# - use ps, not pgrep, because pgrep only checks executable name,
#   not the entire command (so suppress shellcheck warning SC2009)
$show_cmd && echo "if ps -e -o cmd | grep \"\^$grep_matcher\$\" ; then"
# shellcheck disable=SC2009
if ps -e -o cmd | grep "^$grep_matcher$" >/dev/null 2>&1; then
	fb_fatal "$server is already running" \
		"Found process running: '$grep_matcher'"
fi
unset -v grep_matcher

# start server in terminal    {{{1
$show_cmd && echo "$terminal_cmd $server_cmd &"
$terminal_cmd "$server_cmd" &
fb_wait_for_server_start
unset -v browser connected_to_terminal server server_cmd terminal_cmd

# start client in browser    {{{1
$show_cmd && echo "$client_cmd > /dev/null 2>&1 &"
$client_cmd >/dev/null 2>&1 &
unset -v client_cmd show_cmd
# }}}1

# vim:foldmethod=marker:
